{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\nimport { wrapCollection } from '../common-utils';\nimport { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createArchiveEntity, createUnarchiveEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker, createArchivedChecker } from '../instance-actions';\nvar ASSET_PROCESSING_CHECK_WAIT = 3000;\nvar ASSET_PROCESSING_CHECK_RETRIES = 10;\n\nfunction createAssetApi(http) {\n  function checkIfAssetHasUrl(_ref) {\n    var resolve = _ref.resolve,\n        reject = _ref.reject,\n        id = _ref.id,\n        locale = _ref.locale,\n        _ref$processingCheckW = _ref.processingCheckWait,\n        processingCheckWait = _ref$processingCheckW === void 0 ? ASSET_PROCESSING_CHECK_WAIT : _ref$processingCheckW,\n        _ref$processingCheckR = _ref.processingCheckRetries,\n        processingCheckRetries = _ref$processingCheckR === void 0 ? ASSET_PROCESSING_CHECK_RETRIES : _ref$processingCheckR,\n        _ref$checkCount = _ref.checkCount,\n        checkCount = _ref$checkCount === void 0 ? 0 : _ref$checkCount;\n    http.get('assets/' + id).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler).then(function (asset) {\n      if (asset.fields.file[locale].url) {\n        resolve(asset);\n      } else if (checkCount === processingCheckRetries) {\n        var error = new Error();\n        error.name = 'AssetProcessingTimeout';\n        error.message = 'Asset is taking longer then expected to process.';\n        reject(error);\n      } else {\n        checkCount++;\n        setTimeout(function () {\n          return checkIfAssetHasUrl({\n            resolve: resolve,\n            reject: reject,\n            id: id,\n            locale: locale,\n            checkCount: checkCount,\n            processingCheckWait: processingCheckWait,\n            processingCheckRetries: processingCheckRetries\n          });\n        }, processingCheckWait);\n      }\n    });\n  }\n\n  function processForLocale(locale) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        processingCheckWait = _ref2.processingCheckWait,\n        processingCheckRetries = _ref2.processingCheckRetries;\n\n    var assetId = this.sys.id;\n    return http.put('assets/' + this.sys.id + '/files/' + locale + '/process', null, {\n      headers: {\n        'X-Contentful-Version': this.sys.version\n      }\n    }).then(function () {\n      return new Promise(function (resolve, reject) {\n        return checkIfAssetHasUrl({\n          resolve: resolve,\n          reject: reject,\n          id: assetId,\n          locale: locale,\n          processingCheckWait: processingCheckWait,\n          processingCheckRetries: processingCheckRetries\n        });\n      });\n    }, errorHandler);\n  }\n\n  function processForAllLocales() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var self = this;\n    var locales = Object.keys(this.fields.file || {});\n    var mostUpToDateAssetVersion = undefined; // Let all the locales process\n    // Since they all resolve at different times,\n    // we need to pick the last resolved value\n    // to reflect the most recent state\n\n    var allProcessingLocales = locales.map(function (locale) {\n      return processForLocale.call(self, locale, options).then(function (result) {\n        // Side effect of always setting the most up to date asset version\n        // The last one to call this will be the last one that finished\n        // and thus the most up to date\n        mostUpToDateAssetVersion = result;\n      });\n    });\n    return Promise.all(allProcessingLocales).then(function () {\n      return mostUpToDateAssetVersion;\n    });\n  }\n\n  return {\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    \"delete\": createDeleteEntity({\n      http: http,\n      entityPath: 'assets'\n    }),\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    archive: createArchiveEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    unarchive: createUnarchiveEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    processForLocale: processForLocale,\n    processForAllLocales: processForAllLocales,\n    isPublished: createPublishedChecker(),\n    isUpdated: createUpdatedChecker(),\n    isDraft: createDraftChecker(),\n    isArchived: createArchivedChecker()\n  };\n}\n/**\n * @private\n * @param http - HTTP client instance\n * @param data - Raw asset data\n * @return Wrapped asset data\n */\n\n\nexport function wrapAsset(http, data) {\n  var asset = toPlainObject(cloneDeep(data));\n  var assetWithMethods = enhanceWithMethods(asset, createAssetApi(http));\n  return freezeSys(assetWithMethods);\n}\n/**\n * @private\n */\n\nexport var wrapAssetCollection = wrapCollection(wrapAsset);","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/node_modules/contentful-management/dist/es-modules/entities/asset.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","errorHandler","wrapCollection","createUpdateEntity","createDeleteEntity","createPublishEntity","createUnpublishEntity","createArchiveEntity","createUnarchiveEntity","createPublishedChecker","createUpdatedChecker","createDraftChecker","createArchivedChecker","ASSET_PROCESSING_CHECK_WAIT","ASSET_PROCESSING_CHECK_RETRIES","createAssetApi","http","checkIfAssetHasUrl","_ref","resolve","reject","id","locale","_ref$processingCheckW","processingCheckWait","_ref$processingCheckR","processingCheckRetries","_ref$checkCount","checkCount","get","then","response","wrapAsset","data","asset","fields","file","url","error","Error","name","message","setTimeout","processForLocale","_ref2","arguments","length","undefined","assetId","sys","put","headers","version","Promise","processForAllLocales","options","self","locales","Object","keys","mostUpToDateAssetVersion","allProcessingLocales","map","call","result","all","update","entityPath","wrapperMethod","publish","unpublish","archive","unarchive","isPublished","isUpdated","isDraft","isArchived","assetWithMethods","wrapAssetCollection"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,mBAAjD,EAAsEC,qBAAtE,EAA6FC,mBAA7F,EAAkHC,qBAAlH,EAAyIC,sBAAzI,EAAiKC,oBAAjK,EAAuLC,kBAAvL,EAA2MC,qBAA3M,QAAwO,qBAAxO;AACA,IAAIC,2BAA2B,GAAG,IAAlC;AACA,IAAIC,8BAA8B,GAAG,EAArC;;AAEA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,WAASC,kBAAT,CAA4BC,IAA5B,EAAkC;AAChC,QAAIC,OAAO,GAAGD,IAAI,CAACC,OAAnB;AAAA,QACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,QAEIC,EAAE,GAAGH,IAAI,CAACG,EAFd;AAAA,QAGIC,MAAM,GAAGJ,IAAI,CAACI,MAHlB;AAAA,QAIIC,qBAAqB,GAAGL,IAAI,CAACM,mBAJjC;AAAA,QAKIA,mBAAmB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmCV,2BAAnC,GAAiEU,qBAL3F;AAAA,QAMIE,qBAAqB,GAAGP,IAAI,CAACQ,sBANjC;AAAA,QAOIA,sBAAsB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmCX,8BAAnC,GAAoEW,qBAPjG;AAAA,QAQIE,eAAe,GAAGT,IAAI,CAACU,UAR3B;AAAA,QASIA,UAAU,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,CAA7B,GAAiCA,eATlD;AAUAX,IAAAA,IAAI,CAACa,GAAL,CAAS,YAAYR,EAArB,EAAyBS,IAAzB,CAA8B,UAAUC,QAAV,EAAoB;AAChD,aAAOC,SAAS,CAAChB,IAAD,EAAOe,QAAQ,CAACE,IAAhB,CAAhB;AACD,KAFD,EAEGhC,YAFH,EAEiB6B,IAFjB,CAEsB,UAAUI,KAAV,EAAiB;AACrC,UAAIA,KAAK,CAACC,MAAN,CAAaC,IAAb,CAAkBd,MAAlB,EAA0Be,GAA9B,EAAmC;AACjClB,QAAAA,OAAO,CAACe,KAAD,CAAP;AACD,OAFD,MAEO,IAAIN,UAAU,KAAKF,sBAAnB,EAA2C;AAChD,YAAIY,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACAD,QAAAA,KAAK,CAACE,IAAN,GAAa,wBAAb;AACAF,QAAAA,KAAK,CAACG,OAAN,GAAgB,kDAAhB;AACArB,QAAAA,MAAM,CAACkB,KAAD,CAAN;AACD,OALM,MAKA;AACLV,QAAAA,UAAU;AACVc,QAAAA,UAAU,CAAC,YAAY;AACrB,iBAAOzB,kBAAkB,CAAC;AACxBE,YAAAA,OAAO,EAAEA,OADe;AAExBC,YAAAA,MAAM,EAAEA,MAFgB;AAGxBC,YAAAA,EAAE,EAAEA,EAHoB;AAIxBC,YAAAA,MAAM,EAAEA,MAJgB;AAKxBM,YAAAA,UAAU,EAAEA,UALY;AAMxBJ,YAAAA,mBAAmB,EAAEA,mBANG;AAOxBE,YAAAA,sBAAsB,EAAEA;AAPA,WAAD,CAAzB;AASD,SAVS,EAUPF,mBAVO,CAAV;AAWD;AACF,KAxBD;AAyBD;;AAED,WAASmB,gBAAT,CAA0BrB,MAA1B,EAAkC;AAChC,QAAIsB,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AAAA,QACIrB,mBAAmB,GAAGoB,KAAK,CAACpB,mBADhC;AAAA,QAEIE,sBAAsB,GAAGkB,KAAK,CAAClB,sBAFnC;;AAIA,QAAIsB,OAAO,GAAG,KAAKC,GAAL,CAAS5B,EAAvB;AACA,WAAOL,IAAI,CAACkC,GAAL,CAAS,YAAY,KAAKD,GAAL,CAAS5B,EAArB,GAA0B,SAA1B,GAAsCC,MAAtC,GAA+C,UAAxD,EAAoE,IAApE,EAA0E;AAC/E6B,MAAAA,OAAO,EAAE;AACP,gCAAwB,KAAKF,GAAL,CAASG;AAD1B;AADsE,KAA1E,EAIJtB,IAJI,CAIC,YAAY;AAClB,aAAO,IAAIuB,OAAJ,CAAY,UAAUlC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,eAAOH,kBAAkB,CAAC;AACxBE,UAAAA,OAAO,EAAEA,OADe;AAExBC,UAAAA,MAAM,EAAEA,MAFgB;AAGxBC,UAAAA,EAAE,EAAE2B,OAHoB;AAIxB1B,UAAAA,MAAM,EAAEA,MAJgB;AAKxBE,UAAAA,mBAAmB,EAAEA,mBALG;AAMxBE,UAAAA,sBAAsB,EAAEA;AANA,SAAD,CAAzB;AAQD,OATM,CAAP;AAUD,KAfM,EAeJzB,YAfI,CAAP;AAgBD;;AAED,WAASqD,oBAAT,GAAgC;AAC9B,QAAIC,OAAO,GAAGV,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACA,QAAIW,IAAI,GAAG,IAAX;AACA,QAAIC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKxB,MAAL,CAAYC,IAAZ,IAAoB,EAAhC,CAAd;AACA,QAAIwB,wBAAwB,GAAGb,SAA/B,CAJ8B,CAIY;AAC1C;AACA;AACA;;AAEA,QAAIc,oBAAoB,GAAGJ,OAAO,CAACK,GAAR,CAAY,UAAUxC,MAAV,EAAkB;AACvD,aAAOqB,gBAAgB,CAACoB,IAAjB,CAAsBP,IAAtB,EAA4BlC,MAA5B,EAAoCiC,OAApC,EAA6CzB,IAA7C,CAAkD,UAAUkC,MAAV,EAAkB;AACzE;AACA;AACA;AACAJ,QAAAA,wBAAwB,GAAGI,MAA3B;AACD,OALM,CAAP;AAMD,KAP0B,CAA3B;AAQA,WAAOX,OAAO,CAACY,GAAR,CAAYJ,oBAAZ,EAAkC/B,IAAlC,CAAuC,YAAY;AACxD,aAAO8B,wBAAP;AACD,KAFM,CAAP;AAGD;;AAED,SAAO;AACLM,IAAAA,MAAM,EAAE/D,kBAAkB,CAAC;AACzBa,MAAAA,IAAI,EAAEA,IADmB;AAEzBmD,MAAAA,UAAU,EAAE,QAFa;AAGzBC,MAAAA,aAAa,EAAEpC;AAHU,KAAD,CADrB;AAML,cAAU5B,kBAAkB,CAAC;AAC3BY,MAAAA,IAAI,EAAEA,IADqB;AAE3BmD,MAAAA,UAAU,EAAE;AAFe,KAAD,CANvB;AAULE,IAAAA,OAAO,EAAEhE,mBAAmB,CAAC;AAC3BW,MAAAA,IAAI,EAAEA,IADqB;AAE3BmD,MAAAA,UAAU,EAAE,QAFe;AAG3BC,MAAAA,aAAa,EAAEpC;AAHY,KAAD,CAVvB;AAeLsC,IAAAA,SAAS,EAAEhE,qBAAqB,CAAC;AAC/BU,MAAAA,IAAI,EAAEA,IADyB;AAE/BmD,MAAAA,UAAU,EAAE,QAFmB;AAG/BC,MAAAA,aAAa,EAAEpC;AAHgB,KAAD,CAf3B;AAoBLuC,IAAAA,OAAO,EAAEhE,mBAAmB,CAAC;AAC3BS,MAAAA,IAAI,EAAEA,IADqB;AAE3BmD,MAAAA,UAAU,EAAE,QAFe;AAG3BC,MAAAA,aAAa,EAAEpC;AAHY,KAAD,CApBvB;AAyBLwC,IAAAA,SAAS,EAAEhE,qBAAqB,CAAC;AAC/BQ,MAAAA,IAAI,EAAEA,IADyB;AAE/BmD,MAAAA,UAAU,EAAE,QAFmB;AAG/BC,MAAAA,aAAa,EAAEpC;AAHgB,KAAD,CAzB3B;AA8BLW,IAAAA,gBAAgB,EAAEA,gBA9Bb;AA+BLW,IAAAA,oBAAoB,EAAEA,oBA/BjB;AAgCLmB,IAAAA,WAAW,EAAEhE,sBAAsB,EAhC9B;AAiCLiE,IAAAA,SAAS,EAAEhE,oBAAoB,EAjC1B;AAkCLiE,IAAAA,OAAO,EAAEhE,kBAAkB,EAlCtB;AAmCLiE,IAAAA,UAAU,EAAEhE,qBAAqB;AAnC5B,GAAP;AAqCD;AACD;;;;;;;;AAQA,OAAO,SAASoB,SAAT,CAAmBhB,IAAnB,EAAyBiB,IAAzB,EAA+B;AACpC,MAAIC,KAAK,GAAGnC,aAAa,CAACF,SAAS,CAACoC,IAAD,CAAV,CAAzB;AACA,MAAI4C,gBAAgB,GAAG7E,kBAAkB,CAACkC,KAAD,EAAQnB,cAAc,CAACC,IAAD,CAAtB,CAAzC;AACA,SAAOlB,SAAS,CAAC+E,gBAAD,CAAhB;AACD;AACD;;;;AAIA,OAAO,IAAIC,mBAAmB,GAAG5E,cAAc,CAAC8B,SAAD,CAAxC","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\nimport { wrapCollection } from '../common-utils';\nimport { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createArchiveEntity, createUnarchiveEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker, createArchivedChecker } from '../instance-actions';\nvar ASSET_PROCESSING_CHECK_WAIT = 3000;\nvar ASSET_PROCESSING_CHECK_RETRIES = 10;\n\nfunction createAssetApi(http) {\n  function checkIfAssetHasUrl(_ref) {\n    var resolve = _ref.resolve,\n        reject = _ref.reject,\n        id = _ref.id,\n        locale = _ref.locale,\n        _ref$processingCheckW = _ref.processingCheckWait,\n        processingCheckWait = _ref$processingCheckW === void 0 ? ASSET_PROCESSING_CHECK_WAIT : _ref$processingCheckW,\n        _ref$processingCheckR = _ref.processingCheckRetries,\n        processingCheckRetries = _ref$processingCheckR === void 0 ? ASSET_PROCESSING_CHECK_RETRIES : _ref$processingCheckR,\n        _ref$checkCount = _ref.checkCount,\n        checkCount = _ref$checkCount === void 0 ? 0 : _ref$checkCount;\n    http.get('assets/' + id).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler).then(function (asset) {\n      if (asset.fields.file[locale].url) {\n        resolve(asset);\n      } else if (checkCount === processingCheckRetries) {\n        var error = new Error();\n        error.name = 'AssetProcessingTimeout';\n        error.message = 'Asset is taking longer then expected to process.';\n        reject(error);\n      } else {\n        checkCount++;\n        setTimeout(function () {\n          return checkIfAssetHasUrl({\n            resolve: resolve,\n            reject: reject,\n            id: id,\n            locale: locale,\n            checkCount: checkCount,\n            processingCheckWait: processingCheckWait,\n            processingCheckRetries: processingCheckRetries\n          });\n        }, processingCheckWait);\n      }\n    });\n  }\n\n  function processForLocale(locale) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        processingCheckWait = _ref2.processingCheckWait,\n        processingCheckRetries = _ref2.processingCheckRetries;\n\n    var assetId = this.sys.id;\n    return http.put('assets/' + this.sys.id + '/files/' + locale + '/process', null, {\n      headers: {\n        'X-Contentful-Version': this.sys.version\n      }\n    }).then(function () {\n      return new Promise(function (resolve, reject) {\n        return checkIfAssetHasUrl({\n          resolve: resolve,\n          reject: reject,\n          id: assetId,\n          locale: locale,\n          processingCheckWait: processingCheckWait,\n          processingCheckRetries: processingCheckRetries\n        });\n      });\n    }, errorHandler);\n  }\n\n  function processForAllLocales() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var self = this;\n    var locales = Object.keys(this.fields.file || {});\n    var mostUpToDateAssetVersion = undefined; // Let all the locales process\n    // Since they all resolve at different times,\n    // we need to pick the last resolved value\n    // to reflect the most recent state\n\n    var allProcessingLocales = locales.map(function (locale) {\n      return processForLocale.call(self, locale, options).then(function (result) {\n        // Side effect of always setting the most up to date asset version\n        // The last one to call this will be the last one that finished\n        // and thus the most up to date\n        mostUpToDateAssetVersion = result;\n      });\n    });\n    return Promise.all(allProcessingLocales).then(function () {\n      return mostUpToDateAssetVersion;\n    });\n  }\n\n  return {\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    \"delete\": createDeleteEntity({\n      http: http,\n      entityPath: 'assets'\n    }),\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    archive: createArchiveEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    unarchive: createUnarchiveEntity({\n      http: http,\n      entityPath: 'assets',\n      wrapperMethod: wrapAsset\n    }),\n    processForLocale: processForLocale,\n    processForAllLocales: processForAllLocales,\n    isPublished: createPublishedChecker(),\n    isUpdated: createUpdatedChecker(),\n    isDraft: createDraftChecker(),\n    isArchived: createArchivedChecker()\n  };\n}\n/**\n * @private\n * @param http - HTTP client instance\n * @param data - Raw asset data\n * @return Wrapped asset data\n */\n\n\nexport function wrapAsset(http, data) {\n  var asset = toPlainObject(cloneDeep(data));\n  var assetWithMethods = enhanceWithMethods(asset, createAssetApi(http));\n  return freezeSys(assetWithMethods);\n}\n/**\n * @private\n */\n\nexport var wrapAssetCollection = wrapCollection(wrapAsset);"]},"metadata":{},"sourceType":"module"}