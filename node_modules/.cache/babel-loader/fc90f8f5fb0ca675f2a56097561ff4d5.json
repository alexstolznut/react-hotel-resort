{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport cloneDeep from 'lodash/cloneDeep';\nimport entities from './entities';\nimport { wrapTag, wrapTagCollection } from './entities/tag';\nimport errorHandler from './error-handler';\n/**\n * Creates API object with methods to access the Environment API\n */\n\nexport default function createEnvironmentApi(_ref) {\n  var http = _ref.http,\n      httpUpload = _ref.httpUpload;\n  var wrapEnvironment = entities.environment.wrapEnvironment;\n  var _entities$contentType = entities.contentType,\n      wrapContentType = _entities$contentType.wrapContentType,\n      wrapContentTypeCollection = _entities$contentType.wrapContentTypeCollection;\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$asset = entities.asset,\n      wrapAsset = _entities$asset.wrapAsset,\n      wrapAssetCollection = _entities$asset.wrapAssetCollection;\n  var _entities$locale = entities.locale,\n      wrapLocale = _entities$locale.wrapLocale,\n      wrapLocaleCollection = _entities$locale.wrapLocaleCollection;\n  var wrapSnapshotCollection = entities.snapshot.wrapSnapshotCollection;\n  var wrapEditorInterface = entities.editorInterface.wrapEditorInterface;\n  var wrapUpload = entities.upload.wrapUpload;\n  var _entities$uiExtension = entities.uiExtension,\n      wrapUiExtension = _entities$uiExtension.wrapUiExtension,\n      wrapUiExtensionCollection = _entities$uiExtension.wrapUiExtensionCollection;\n  var _entities$appInstalla = entities.appInstallation,\n      wrapAppInstallation = _entities$appInstalla.wrapAppInstallation,\n      wrapAppInstallationCollection = _entities$appInstalla.wrapAppInstallationCollection;\n\n  function createAsset(data) {\n    return http.post('assets', data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  function createUpload(data) {\n    var file = data.file;\n\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'));\n    }\n\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    }).then(function (uploadResponse) {\n      return wrapUpload(httpUpload, uploadResponse.data);\n    })[\"catch\"](errorHandler);\n  }\n  /**\n   * @private\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   */\n\n\n  function normalizeSelect(query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys';\n    }\n  }\n\n  return {\n    /**\n     * Deletes the environment\n     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.delete())\n     * .then(() => console.log('Environment deleted.'))\n     * .catch(console.error)\n     * ```\n     */\n    \"delete\": function deleteEnvironment() {\n      return http[\"delete\"]('').then(function () {// noop\n      }, errorHandler);\n    },\n\n    /**\n     * Updates the environment\n     * @return Promise for the updated environment.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => {\n     *   environment.name = 'New name'\n     *   return environment.update()\n     * })\n     * .then((environment) => console.log(`Environment ${environment.sys.id} renamed.`)\n     * .catch(console.error)\n     * ```\n     */\n    update: function updateEnvironment() {\n      var raw = this.toPlainObject();\n      var data = cloneDeep(raw);\n      delete data.sys;\n      return http.put('', data, {\n        headers: {\n          'X-Contentful-Version': raw.sys.version\n        }\n      }).then(function (response) {\n        return wrapEnvironment(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates SDK Entry object (locally) from entry data\n     * @param entryData - Entry Data\n     * @return Entry\n     * @example ```javascript\n     * environment.getEntry('entryId').then(entry => {\n     *\n     *   // Build a plainObject in order to make it usable for React (saving in state or redux)\n     *   const plainObject = entry.toPlainObject();\n     *\n     *   // The entry is being updated in some way as plainObject:\n     *   const updatedPlainObject = {\n     *     ...plainObject,\n     *     fields: {\n     *       ...plainObject.fields,\n     *       title: {\n     *         'en-US': 'updatedTitle'\n     *       }\n     *     }\n     *   };\n     *\n     *   // Rebuild an sdk object out of the updated plainObject:\n     *   const entryWithMethodsAgain = environment.getEntryFromData(updatedPlainObject);\n     *\n     *   // Update with help of the sdk method:\n     *   entryWithMethodsAgain.update();\n     *\n     * });\n     * ```\n     **/\n    getEntryFromData: function getEntryFromData(entryData) {\n      return wrapEntry(http, entryData);\n    },\n\n    /**\n     * Creates SDK Asset object (locally) from entry data\n     * @param assetData - Asset ID\n     * @return Asset\n     * @example ```javascript\n     * environment.getAsset('asset_id').then(asset => {\n     *\n     *   // Build a plainObject in order to make it usable for React (saving in state or redux)\n     *   const plainObject = asset.toPlainObject();\n     *\n     *   // The asset is being updated in some way as plainObject:\n     *   const updatedPlainObject = {\n     *     ...plainObject,\n     *     fields: {\n     *       ...plainObject.fields,\n     *       title: {\n     *         'en-US': 'updatedTitle'\n     *       }\n     *     }\n     *   };\n     *\n     *   // Rebuild an sdk object out of the updated plainObject:\n     *   const assetWithMethodsAgain = environment.getAssetFromData(updatedPlainObject);\n     *\n     *   // Update with help of the sdk method:\n     *   assetWithMethodsAgain.update();\n     *\n     * });\n     * ```\n     */\n    getAssetFromData: function getAssetFromData(assetData) {\n      return wrapAsset(http, assetData);\n    },\n\n    /**\n     * Gets a Content Type\n     * @param id - Content Type ID\n     * @return Promise for a Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getContentType('<content_type_id>'))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    getContentType: function getContentType(id) {\n      return http.get('content_types/' + id).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Content Types\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Content Types\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getContentTypes())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getContentTypes: function getContentTypes() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('content_types', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapContentTypeCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Content Type\n     * @param data - Object representation of the Content Type to be created\n     * @return Promise for the newly created Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createContentType({\n     *   name: 'Blog Post',\n     *   fields: [\n     *     {\n     *       id: 'title',\n     *       name: 'Title',\n     *       required: true,\n     *       localized: false,\n     *       type: 'Text'\n     *     }\n     *   ]\n     * }))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    createContentType: function createContentType(data) {\n      return http.post('content_types', data).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Content Type with a custom ID\n     * @param id - Content Type ID\n     * @param data - Object representation of the Content Type to be created\n     * @return Promise for the newly created Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createContentTypeWithId('<content-type-id>', {\n     *   name: 'Blog Post',\n     *   fields: [\n     *     {\n     *       id: 'title',\n     *       name: 'Title',\n     *       required: true,\n     *       localized: false,\n     *       type: 'Text'\n     *     }\n     *   ]\n     * }))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    createContentTypeWithId: function createContentTypeWithId(id, data) {\n      return http.put('content_types/' + id, data).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an EditorInterface for a ContentType\n     * @param contentTypeId - Content Type ID\n     * @return Promise for an EditorInterface\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEditorInterfaceForContentType('<content_type_id>'))\n     * .then((EditorInterface) => console.log(EditorInterface))\n     * .catch(console.error)\n     * ```\n     */\n    getEditorInterfaceForContentType: function getEditorInterfaceForContentType(contentTypeId) {\n      return http.get('content_types/' + contentTypeId + '/editor_interface').then(function (response) {\n        return wrapEditorInterface(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an Entry\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @param id - Entry ID\n     * @param query - Object with search parameters. In this method it's only useful for `locale`.\n     * @return Promise for an Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    getEntry: function getEntry(id) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      normalizeSelect(query);\n      return http.get('entries/' + id, createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Entries\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Entries\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEntries: function getEntries() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      normalizeSelect(query);\n      return http.get('entries', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapEntryCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Entry\n     * @param contentTypeId - The Content Type ID of the newly created Entry\n     * @param data - Object representation of the Entry to be created\n     * @return Promise for the newly created Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createEntry('<content_type_id>', {\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Entry title'\n     *     }\n     *   }\n     * }))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    createEntry: function createEntry(contentTypeId, data) {\n      return http.post('entries', data, {\n        headers: {\n          'X-Contentful-Content-Type': contentTypeId\n        }\n      }).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Entry with a custom ID\n     * @param contentTypeId - The Content Type of the newly created Entry\n     * @param id - Entry ID\n     * @param data - Object representation of the Entry to be created\n     * @return Promise for the newly created Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create entry\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createEntryWithId('<content_type_id>', '<entry_id>', {\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Entry title'\n     *     }\n     *   }\n     * }))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    createEntryWithId: function createEntryWithId(contentTypeId, id, data) {\n      return http.put('entries/' + id, data, {\n        headers: {\n          'X-Contentful-Content-Type': contentTypeId\n        }\n      }).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an Asset\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @param id - Asset ID\n     * @param query - Object with search parameters. In this method it's only useful for `locale`.\n     * @return Promise for an Asset\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getAsset('<asset_id>'))\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    getAsset: function getAsset(id) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      normalizeSelect(query);\n      return http.get('assets/' + id, createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapAsset(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Assets\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Assets\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getAssets())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getAssets: function getAssets() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      normalizeSelect(query);\n      return http.get('assets', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapAssetCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create asset\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createAsset({\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Playsam Streamliner'\n     *    },\n     *    file: {\n     *       'en-US': {\n     *         contentType: 'image/jpeg',\n     *        fileName: 'example.jpeg',\n     *        upload: 'https://example.com/example.jpg'\n     *      }\n     *    }\n     *   }\n     * }))\n     * .then((asset) => asset.processForLocale(\"en-US\")) // OR asset.processForAllLocales()\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAsset: createAsset,\n\n    /**\n     * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @param id - Asset ID\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create asset\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createAssetWithId('<asset_id>', {\n     *   title: {\n     *     'en-US': 'Playsam Streamliner'\n     *   },\n     *   file: {\n     *     'en-US': {\n     *       contentType: 'image/jpeg',\n     *       fileName: 'example.jpeg',\n     *       upload: 'https://example.com/example.jpg'\n     *     }\n     *   }\n     * }))\n     * .then((asset) => asset.process())\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAssetWithId: function createAssetWithId(id, data) {\n      return http.put('assets/' + id, data).then(function (response) {\n        return wrapAsset(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @param data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createAssetFromFiles({\n     *   fields: {\n     *     file: {\n     *       'en-US': {\n     *          contentType: 'image/jpeg',\n     *          fileName: 'filename_english.jpg',\n     *          file: createReadStream('path/to/filename_english.jpg')\n     *       },\n     *       'de-DE': {\n     *          contentType: 'image/svg+xml',\n     *          fileName: 'filename_german.svg',\n     *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n     *       }\n     *     }\n     *   }\n     * }))\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAssetFromFiles: function createAssetFromFiles(data) {\n      var file = data.fields.file;\n      return Promise.all(Object.keys(file).map(function (locale) {\n        var _file$locale = file[locale],\n            contentType = _file$locale.contentType,\n            fileName = _file$locale.fileName;\n        return createUpload(file[locale]).then(function (upload) {\n          return _defineProperty({}, locale, {\n            contentType: contentType,\n            fileName: fileName,\n            uploadFrom: {\n              sys: {\n                type: 'Link',\n                linkType: 'Upload',\n                id: upload.sys.id\n              }\n            }\n          });\n        });\n      })).then(function (uploads) {\n        var file = uploads.reduce(function (fieldsData, upload) {\n          return _objectSpread(_objectSpread({}, fieldsData), upload);\n        }, {});\n\n        var asset = _objectSpread(_objectSpread({}, data), {}, {\n          fields: _objectSpread(_objectSpread({}, data.fields), {}, {\n            file: file\n          })\n        });\n\n        return createAsset(asset);\n      })[\"catch\"](errorHandler);\n    },\n\n    /**\n     * Gets an Upload\n     * @param id - Upload ID\n     * @return Promise for an Upload\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * const uploadStream = createReadStream('path/to/filename_english.jpg')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getUpload('<upload-id>')\n     * .then((upload) => console.log(upload))\n     * .catch(console.error)\n     */\n    getUpload: function getUpload(id) {\n      return httpUpload.get('uploads/' + id).then(function (response) {\n        return wrapUpload(http, response.data);\n      })[\"catch\"](errorHandler);\n    },\n\n    /**\n     * Creates a Upload.\n     * @param data - Object with file information.\n     * @param data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n     * @return Upload object containing information about the uploaded file.\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * const uploadStream = createReadStream('path/to/filename_english.jpg')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createUpload({file: uploadStream})\n     * .then((upload) => console.log(upload))\n     * .catch(console.error)\n     * ```\n     */\n    createUpload: createUpload,\n\n    /**\n     * Gets a Locale\n     * @param id - Locale ID\n     * @return Promise for an Locale\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getLocale('<locale_id>'))\n     * .then((locale) => console.log(locale))\n     * .catch(console.error)\n     * ```\n     */\n    getLocale: function getLocale(id) {\n      return http.get('locales/' + id).then(function (response) {\n        return wrapLocale(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Locales\n     * @return Promise for a collection of Locales\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getLocales())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getLocales: function getLocales() {\n      return http.get('locales').then(function (response) {\n        return wrapLocaleCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Locale\n     * @param data - Object representation of the Locale to be created\n     * @return Promise for the newly created Locale\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create locale\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createLocale({\n     *   name: 'German (Austria)',\n     *   code: 'de-AT',\n     *   fallbackCode: 'de-DE',\n     *   optional: true\n     * }))\n     * .then((locale) => console.log(locale))\n     * .catch(console.error)\n     * ```\n     */\n    createLocale: function createLocale(data) {\n      return http.post('locales', data).then(function (response) {\n        return wrapLocale(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an UI Extension\n     * @param id - Extension ID\n     * @return Promise for an UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getUiExtension('<extension-id>'))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    getUiExtension: function getUiExtension(id) {\n      return http.get('extensions/' + id).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of UI Extension\n     * @return Promise for a collection of UI Extensions\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getUiExtensions()\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getUiExtensions: function getUiExtensions() {\n      return http.get('extensions').then(function (response) {\n        return wrapUiExtensionCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a UI Extension\n     * @param data - Object representation of the UI Extension to be created\n     * @return Promise for the newly created UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createUiExtension({\n     *   extension: {\n     *     name: 'My awesome extension',\n     *     src: 'https://example.com/my',\n     *     fieldTypes: [\n     *       {\n     *         type: 'Symbol'\n     *       },\n     *       {\n     *         type: 'Text'\n     *       }\n     *     ],\n     *     sidebar: false\n     *   }\n     * }))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    createUiExtension: function createUiExtension(data) {\n      return http.post('extensions', data).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a UI Extension with a custom ID\n     * @param id - Extension ID\n     * @param data - Object representation of the UI Extension to be created\n     * @return Promise for the newly created UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createUiExtensionWithId('<extension_id>', {\n     *   extension: {\n     *     name: 'My awesome extension',\n     *     src: 'https://example.com/my',\n     *     fieldTypes: [\n     *       {\n     *         type: 'Symbol'\n     *       },\n     *       {\n     *         type: 'Text'\n     *       }\n     *     ],\n     *     sidebar: false\n     *   }\n     * }))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    createUiExtensionWithId: function createUiExtensionWithId(id, data) {\n      return http.put('extensions/' + id, data).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an App Installation\n     * @param appDefinitionId - AppDefinition ID\n     * @param data - AppInstallation data\n     * @return Promise for an App Installation\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *  .then((space) => space.getEnvironment('<environment-id>'))\n     *  .then((environment) => environment.createAppInstallation('<app_definition_id>', {\n     *    parameters: {\n     *      someParameter: someValue\n     *    }\n     *   })\n     *  .then((appInstallation) => console.log(appInstallation))\n     *  .catch(console.error)\n     *  ```\n     */\n    createAppInstallation: function createAppInstallation(appDefinitionId, data) {\n      return http.put('app_installations/' + appDefinitionId, data).then(function (response) {\n        return wrapAppInstallation(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an App Installation\n     * @param id - AppDefintion ID\n     * @return Promise for an App Installation\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *  .then((space) => space.getEnvironment('<environment-id>'))\n     *  .then((environment) => environment.getAppInstallation('<app-definition-id>'))\n     *  .then((appInstallation) => console.log(appInstallation))\n     *  .catch(console.error)\n     *  ```\n     */\n    getAppInstallation: function getAppInstallation(id) {\n      return http.get('app_installations/' + id).then(function (response) {\n        return wrapAppInstallation(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of App Installation\n     * @return Promise for a collection of App Installations\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *  .then((space) => space.getEnvironment('<environment-id>'))\n     *  .then((environment) => environment.getAppInstallations()\n     *  .then((response) => console.log(response.items))\n     *  .catch(console.error)\n     *  ```\n     */\n    getAppInstallations: function getAppInstallations() {\n      return http.get('app_installations').then(function (response) {\n        return wrapAppInstallationCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets all snapshots of an entry\n     * @func getEntrySnapshots\n     * @param entryId - Entry ID\n     * @param query - query additional query paramaters\n     * @return Promise for a collection of Entry Snapshots\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntrySnapshots('<entry_id>'))\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEntrySnapshots: function getEntrySnapshots(entryId) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return http.get(\"entries/\".concat(entryId, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets all snapshots of a contentType\n     * @func getContentTypeSnapshots\n     * @param contentTypeId - Content Type ID\n     * @param query - query additional query paramaters\n     * @return Promise for a collection of Content Type Snapshots\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getContentTypeSnapshots('<contentTypeId>'))\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getContentTypeSnapshots: function getContentTypeSnapshots(contentTypeId) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return http.get(\"content_types/\".concat(contentTypeId, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n    createTag: function createTag(id, name) {\n      return http.put(\"tags/\".concat(id), {\n        name: name,\n        sys: {\n          type: 'Tag',\n          id: id\n        }\n      }).then(function (response) {\n        return wrapTag(http, response.data);\n      }, errorHandler);\n    },\n    getTags: function getTags() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('tags', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapTagCollection(http, response.data);\n      }, errorHandler);\n    },\n    getTag: function getTag(id) {\n      return http.get('tags/' + id).then(function (response) {\n        return wrapTag(http, response.data);\n      }, errorHandler);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/node_modules/contentful-management/dist/es-modules/create-environment-api.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","createRequestConfig","cloneDeep","entities","wrapTag","wrapTagCollection","errorHandler","createEnvironmentApi","_ref","http","httpUpload","wrapEnvironment","environment","_entities$contentType","contentType","wrapContentType","wrapContentTypeCollection","_entities$entry","entry","wrapEntry","wrapEntryCollection","_entities$asset","asset","wrapAsset","wrapAssetCollection","_entities$locale","locale","wrapLocale","wrapLocaleCollection","wrapSnapshotCollection","snapshot","wrapEditorInterface","editorInterface","wrapUpload","upload","_entities$uiExtension","uiExtension","wrapUiExtension","wrapUiExtensionCollection","_entities$appInstalla","appInstallation","wrapAppInstallation","wrapAppInstallationCollection","createAsset","data","post","then","response","createUpload","file","Promise","reject","Error","headers","uploadResponse","normalizeSelect","query","select","test","deleteEnvironment","update","updateEnvironment","raw","toPlainObject","sys","put","version","getEntryFromData","entryData","getAssetFromData","assetData","getContentType","id","get","getContentTypes","undefined","createContentType","createContentTypeWithId","getEditorInterfaceForContentType","contentTypeId","getEntry","getEntries","createEntry","createEntryWithId","getAsset","getAssets","createAssetWithId","createAssetFromFiles","fields","all","map","_file$locale","fileName","uploadFrom","type","linkType","uploads","reduce","fieldsData","getUpload","getLocale","getLocales","createLocale","getUiExtension","getUiExtensions","createUiExtension","createUiExtensionWithId","createAppInstallation","appDefinitionId","getAppInstallation","getAppInstallations","getEntrySnapshots","entryId","concat","getContentTypeSnapshots","createTag","name","getTags","getTag"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport cloneDeep from 'lodash/cloneDeep';\nimport entities from './entities';\nimport { wrapTag, wrapTagCollection } from './entities/tag';\nimport errorHandler from './error-handler';\n\n/**\n * Creates API object with methods to access the Environment API\n */\nexport default function createEnvironmentApi(_ref) {\n  var http = _ref.http,\n      httpUpload = _ref.httpUpload;\n  var wrapEnvironment = entities.environment.wrapEnvironment;\n  var _entities$contentType = entities.contentType,\n      wrapContentType = _entities$contentType.wrapContentType,\n      wrapContentTypeCollection = _entities$contentType.wrapContentTypeCollection;\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$asset = entities.asset,\n      wrapAsset = _entities$asset.wrapAsset,\n      wrapAssetCollection = _entities$asset.wrapAssetCollection;\n  var _entities$locale = entities.locale,\n      wrapLocale = _entities$locale.wrapLocale,\n      wrapLocaleCollection = _entities$locale.wrapLocaleCollection;\n  var wrapSnapshotCollection = entities.snapshot.wrapSnapshotCollection;\n  var wrapEditorInterface = entities.editorInterface.wrapEditorInterface;\n  var wrapUpload = entities.upload.wrapUpload;\n  var _entities$uiExtension = entities.uiExtension,\n      wrapUiExtension = _entities$uiExtension.wrapUiExtension,\n      wrapUiExtensionCollection = _entities$uiExtension.wrapUiExtensionCollection;\n  var _entities$appInstalla = entities.appInstallation,\n      wrapAppInstallation = _entities$appInstalla.wrapAppInstallation,\n      wrapAppInstallationCollection = _entities$appInstalla.wrapAppInstallationCollection;\n\n  function createAsset(data) {\n    return http.post('assets', data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  function createUpload(data) {\n    var file = data.file;\n\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'));\n    }\n\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    }).then(function (uploadResponse) {\n      return wrapUpload(httpUpload, uploadResponse.data);\n    })[\"catch\"](errorHandler);\n  }\n  /**\n   * @private\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   */\n\n\n  function normalizeSelect(query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys';\n    }\n  }\n\n  return {\n    /**\n     * Deletes the environment\n     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.delete())\n     * .then(() => console.log('Environment deleted.'))\n     * .catch(console.error)\n     * ```\n     */\n    \"delete\": function deleteEnvironment() {\n      return http[\"delete\"]('').then(function () {// noop\n      }, errorHandler);\n    },\n\n    /**\n     * Updates the environment\n     * @return Promise for the updated environment.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => {\n     *   environment.name = 'New name'\n     *   return environment.update()\n     * })\n     * .then((environment) => console.log(`Environment ${environment.sys.id} renamed.`)\n     * .catch(console.error)\n     * ```\n     */\n    update: function updateEnvironment() {\n      var raw = this.toPlainObject();\n      var data = cloneDeep(raw);\n      delete data.sys;\n      return http.put('', data, {\n        headers: {\n          'X-Contentful-Version': raw.sys.version\n        }\n      }).then(function (response) {\n        return wrapEnvironment(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates SDK Entry object (locally) from entry data\n     * @param entryData - Entry Data\n     * @return Entry\n     * @example ```javascript\n     * environment.getEntry('entryId').then(entry => {\n     *\n     *   // Build a plainObject in order to make it usable for React (saving in state or redux)\n     *   const plainObject = entry.toPlainObject();\n     *\n     *   // The entry is being updated in some way as plainObject:\n     *   const updatedPlainObject = {\n     *     ...plainObject,\n     *     fields: {\n     *       ...plainObject.fields,\n     *       title: {\n     *         'en-US': 'updatedTitle'\n     *       }\n     *     }\n     *   };\n     *\n     *   // Rebuild an sdk object out of the updated plainObject:\n     *   const entryWithMethodsAgain = environment.getEntryFromData(updatedPlainObject);\n     *\n     *   // Update with help of the sdk method:\n     *   entryWithMethodsAgain.update();\n     *\n     * });\n     * ```\n     **/\n    getEntryFromData: function getEntryFromData(entryData) {\n      return wrapEntry(http, entryData);\n    },\n\n    /**\n     * Creates SDK Asset object (locally) from entry data\n     * @param assetData - Asset ID\n     * @return Asset\n     * @example ```javascript\n     * environment.getAsset('asset_id').then(asset => {\n     *\n     *   // Build a plainObject in order to make it usable for React (saving in state or redux)\n     *   const plainObject = asset.toPlainObject();\n     *\n     *   // The asset is being updated in some way as plainObject:\n     *   const updatedPlainObject = {\n     *     ...plainObject,\n     *     fields: {\n     *       ...plainObject.fields,\n     *       title: {\n     *         'en-US': 'updatedTitle'\n     *       }\n     *     }\n     *   };\n     *\n     *   // Rebuild an sdk object out of the updated plainObject:\n     *   const assetWithMethodsAgain = environment.getAssetFromData(updatedPlainObject);\n     *\n     *   // Update with help of the sdk method:\n     *   assetWithMethodsAgain.update();\n     *\n     * });\n     * ```\n     */\n    getAssetFromData: function getAssetFromData(assetData) {\n      return wrapAsset(http, assetData);\n    },\n\n    /**\n     * Gets a Content Type\n     * @param id - Content Type ID\n     * @return Promise for a Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getContentType('<content_type_id>'))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    getContentType: function getContentType(id) {\n      return http.get('content_types/' + id).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Content Types\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Content Types\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getContentTypes())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getContentTypes: function getContentTypes() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('content_types', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapContentTypeCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Content Type\n     * @param data - Object representation of the Content Type to be created\n     * @return Promise for the newly created Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createContentType({\n     *   name: 'Blog Post',\n     *   fields: [\n     *     {\n     *       id: 'title',\n     *       name: 'Title',\n     *       required: true,\n     *       localized: false,\n     *       type: 'Text'\n     *     }\n     *   ]\n     * }))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    createContentType: function createContentType(data) {\n      return http.post('content_types', data).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Content Type with a custom ID\n     * @param id - Content Type ID\n     * @param data - Object representation of the Content Type to be created\n     * @return Promise for the newly created Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createContentTypeWithId('<content-type-id>', {\n     *   name: 'Blog Post',\n     *   fields: [\n     *     {\n     *       id: 'title',\n     *       name: 'Title',\n     *       required: true,\n     *       localized: false,\n     *       type: 'Text'\n     *     }\n     *   ]\n     * }))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    createContentTypeWithId: function createContentTypeWithId(id, data) {\n      return http.put('content_types/' + id, data).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an EditorInterface for a ContentType\n     * @param contentTypeId - Content Type ID\n     * @return Promise for an EditorInterface\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEditorInterfaceForContentType('<content_type_id>'))\n     * .then((EditorInterface) => console.log(EditorInterface))\n     * .catch(console.error)\n     * ```\n     */\n    getEditorInterfaceForContentType: function getEditorInterfaceForContentType(contentTypeId) {\n      return http.get('content_types/' + contentTypeId + '/editor_interface').then(function (response) {\n        return wrapEditorInterface(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an Entry\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @param id - Entry ID\n     * @param query - Object with search parameters. In this method it's only useful for `locale`.\n     * @return Promise for an Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntry('<entry-id>'))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    getEntry: function getEntry(id) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      normalizeSelect(query);\n      return http.get('entries/' + id, createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Entries\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Entries\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEntries: function getEntries() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      normalizeSelect(query);\n      return http.get('entries', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapEntryCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Entry\n     * @param contentTypeId - The Content Type ID of the newly created Entry\n     * @param data - Object representation of the Entry to be created\n     * @return Promise for the newly created Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createEntry('<content_type_id>', {\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Entry title'\n     *     }\n     *   }\n     * }))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    createEntry: function createEntry(contentTypeId, data) {\n      return http.post('entries', data, {\n        headers: {\n          'X-Contentful-Content-Type': contentTypeId\n        }\n      }).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Entry with a custom ID\n     * @param contentTypeId - The Content Type of the newly created Entry\n     * @param id - Entry ID\n     * @param data - Object representation of the Entry to be created\n     * @return Promise for the newly created Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create entry\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createEntryWithId('<content_type_id>', '<entry_id>', {\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Entry title'\n     *     }\n     *   }\n     * }))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    createEntryWithId: function createEntryWithId(contentTypeId, id, data) {\n      return http.put('entries/' + id, data, {\n        headers: {\n          'X-Contentful-Content-Type': contentTypeId\n        }\n      }).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an Asset\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @param id - Asset ID\n     * @param query - Object with search parameters. In this method it's only useful for `locale`.\n     * @return Promise for an Asset\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getAsset('<asset_id>'))\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    getAsset: function getAsset(id) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      normalizeSelect(query);\n      return http.get('assets/' + id, createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapAsset(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Assets\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Assets\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getAssets())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getAssets: function getAssets() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      normalizeSelect(query);\n      return http.get('assets', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapAssetCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create asset\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createAsset({\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Playsam Streamliner'\n     *    },\n     *    file: {\n     *       'en-US': {\n     *         contentType: 'image/jpeg',\n     *        fileName: 'example.jpeg',\n     *        upload: 'https://example.com/example.jpg'\n     *      }\n     *    }\n     *   }\n     * }))\n     * .then((asset) => asset.processForLocale(\"en-US\")) // OR asset.processForAllLocales()\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAsset: createAsset,\n\n    /**\n     * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @param id - Asset ID\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create asset\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createAssetWithId('<asset_id>', {\n     *   title: {\n     *     'en-US': 'Playsam Streamliner'\n     *   },\n     *   file: {\n     *     'en-US': {\n     *       contentType: 'image/jpeg',\n     *       fileName: 'example.jpeg',\n     *       upload: 'https://example.com/example.jpg'\n     *     }\n     *   }\n     * }))\n     * .then((asset) => asset.process())\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAssetWithId: function createAssetWithId(id, data) {\n      return http.put('assets/' + id, data).then(function (response) {\n        return wrapAsset(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @param data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createAssetFromFiles({\n     *   fields: {\n     *     file: {\n     *       'en-US': {\n     *          contentType: 'image/jpeg',\n     *          fileName: 'filename_english.jpg',\n     *          file: createReadStream('path/to/filename_english.jpg')\n     *       },\n     *       'de-DE': {\n     *          contentType: 'image/svg+xml',\n     *          fileName: 'filename_german.svg',\n     *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n     *       }\n     *     }\n     *   }\n     * }))\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAssetFromFiles: function createAssetFromFiles(data) {\n      var file = data.fields.file;\n      return Promise.all(Object.keys(file).map(function (locale) {\n        var _file$locale = file[locale],\n            contentType = _file$locale.contentType,\n            fileName = _file$locale.fileName;\n        return createUpload(file[locale]).then(function (upload) {\n          return _defineProperty({}, locale, {\n            contentType: contentType,\n            fileName: fileName,\n            uploadFrom: {\n              sys: {\n                type: 'Link',\n                linkType: 'Upload',\n                id: upload.sys.id\n              }\n            }\n          });\n        });\n      })).then(function (uploads) {\n        var file = uploads.reduce(function (fieldsData, upload) {\n          return _objectSpread(_objectSpread({}, fieldsData), upload);\n        }, {});\n\n        var asset = _objectSpread(_objectSpread({}, data), {}, {\n          fields: _objectSpread(_objectSpread({}, data.fields), {}, {\n            file: file\n          })\n        });\n\n        return createAsset(asset);\n      })[\"catch\"](errorHandler);\n    },\n\n    /**\n     * Gets an Upload\n     * @param id - Upload ID\n     * @return Promise for an Upload\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * const uploadStream = createReadStream('path/to/filename_english.jpg')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getUpload('<upload-id>')\n     * .then((upload) => console.log(upload))\n     * .catch(console.error)\n     */\n    getUpload: function getUpload(id) {\n      return httpUpload.get('uploads/' + id).then(function (response) {\n        return wrapUpload(http, response.data);\n      })[\"catch\"](errorHandler);\n    },\n\n    /**\n     * Creates a Upload.\n     * @param data - Object with file information.\n     * @param data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n     * @return Upload object containing information about the uploaded file.\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * const uploadStream = createReadStream('path/to/filename_english.jpg')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createUpload({file: uploadStream})\n     * .then((upload) => console.log(upload))\n     * .catch(console.error)\n     * ```\n     */\n    createUpload: createUpload,\n\n    /**\n     * Gets a Locale\n     * @param id - Locale ID\n     * @return Promise for an Locale\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getLocale('<locale_id>'))\n     * .then((locale) => console.log(locale))\n     * .catch(console.error)\n     * ```\n     */\n    getLocale: function getLocale(id) {\n      return http.get('locales/' + id).then(function (response) {\n        return wrapLocale(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Locales\n     * @return Promise for a collection of Locales\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getLocales())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getLocales: function getLocales() {\n      return http.get('locales').then(function (response) {\n        return wrapLocaleCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Locale\n     * @param data - Object representation of the Locale to be created\n     * @return Promise for the newly created Locale\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create locale\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createLocale({\n     *   name: 'German (Austria)',\n     *   code: 'de-AT',\n     *   fallbackCode: 'de-DE',\n     *   optional: true\n     * }))\n     * .then((locale) => console.log(locale))\n     * .catch(console.error)\n     * ```\n     */\n    createLocale: function createLocale(data) {\n      return http.post('locales', data).then(function (response) {\n        return wrapLocale(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an UI Extension\n     * @param id - Extension ID\n     * @return Promise for an UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getUiExtension('<extension-id>'))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    getUiExtension: function getUiExtension(id) {\n      return http.get('extensions/' + id).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of UI Extension\n     * @return Promise for a collection of UI Extensions\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getUiExtensions()\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getUiExtensions: function getUiExtensions() {\n      return http.get('extensions').then(function (response) {\n        return wrapUiExtensionCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a UI Extension\n     * @param data - Object representation of the UI Extension to be created\n     * @return Promise for the newly created UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createUiExtension({\n     *   extension: {\n     *     name: 'My awesome extension',\n     *     src: 'https://example.com/my',\n     *     fieldTypes: [\n     *       {\n     *         type: 'Symbol'\n     *       },\n     *       {\n     *         type: 'Text'\n     *       }\n     *     ],\n     *     sidebar: false\n     *   }\n     * }))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    createUiExtension: function createUiExtension(data) {\n      return http.post('extensions', data).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a UI Extension with a custom ID\n     * @param id - Extension ID\n     * @param data - Object representation of the UI Extension to be created\n     * @return Promise for the newly created UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.createUiExtensionWithId('<extension_id>', {\n     *   extension: {\n     *     name: 'My awesome extension',\n     *     src: 'https://example.com/my',\n     *     fieldTypes: [\n     *       {\n     *         type: 'Symbol'\n     *       },\n     *       {\n     *         type: 'Text'\n     *       }\n     *     ],\n     *     sidebar: false\n     *   }\n     * }))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    createUiExtensionWithId: function createUiExtensionWithId(id, data) {\n      return http.put('extensions/' + id, data).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an App Installation\n     * @param appDefinitionId - AppDefinition ID\n     * @param data - AppInstallation data\n     * @return Promise for an App Installation\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *  .then((space) => space.getEnvironment('<environment-id>'))\n     *  .then((environment) => environment.createAppInstallation('<app_definition_id>', {\n     *    parameters: {\n     *      someParameter: someValue\n     *    }\n     *   })\n     *  .then((appInstallation) => console.log(appInstallation))\n     *  .catch(console.error)\n     *  ```\n     */\n    createAppInstallation: function createAppInstallation(appDefinitionId, data) {\n      return http.put('app_installations/' + appDefinitionId, data).then(function (response) {\n        return wrapAppInstallation(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an App Installation\n     * @param id - AppDefintion ID\n     * @return Promise for an App Installation\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *  .then((space) => space.getEnvironment('<environment-id>'))\n     *  .then((environment) => environment.getAppInstallation('<app-definition-id>'))\n     *  .then((appInstallation) => console.log(appInstallation))\n     *  .catch(console.error)\n     *  ```\n     */\n    getAppInstallation: function getAppInstallation(id) {\n      return http.get('app_installations/' + id).then(function (response) {\n        return wrapAppInstallation(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of App Installation\n     * @return Promise for a collection of App Installations\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *  .then((space) => space.getEnvironment('<environment-id>'))\n     *  .then((environment) => environment.getAppInstallations()\n     *  .then((response) => console.log(response.items))\n     *  .catch(console.error)\n     *  ```\n     */\n    getAppInstallations: function getAppInstallations() {\n      return http.get('app_installations').then(function (response) {\n        return wrapAppInstallationCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets all snapshots of an entry\n     * @func getEntrySnapshots\n     * @param entryId - Entry ID\n     * @param query - query additional query paramaters\n     * @return Promise for a collection of Entry Snapshots\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getEntrySnapshots('<entry_id>'))\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEntrySnapshots: function getEntrySnapshots(entryId) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return http.get(\"entries/\".concat(entryId, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets all snapshots of a contentType\n     * @func getContentTypeSnapshots\n     * @param contentTypeId - Content Type ID\n     * @param query - query additional query paramaters\n     * @return Promise for a collection of Content Type Snapshots\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environment-id>'))\n     * .then((environment) => environment.getContentTypeSnapshots('<contentTypeId>'))\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getContentTypeSnapshots: function getContentTypeSnapshots(contentTypeId) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return http.get(\"content_types/\".concat(contentTypeId, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n    createTag: function createTag(id, name) {\n      return http.put(\"tags/\".concat(id), {\n        name: name,\n        sys: {\n          type: 'Tag',\n          id: id\n        }\n      }).then(function (response) {\n        return wrapTag(http, response.data);\n      }, errorHandler);\n    },\n    getTags: function getTags() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('tags', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapTagCollection(http, response.data);\n      }, errorHandler);\n    },\n    getTag: function getTag(id) {\n      return http.get('tags/' + id).then(function (response) {\n        return wrapTag(http, response.data);\n      }, errorHandler);\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}