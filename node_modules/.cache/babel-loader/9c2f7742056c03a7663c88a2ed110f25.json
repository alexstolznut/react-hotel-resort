{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport createOrganizationApi from '../create-organization-api';\nimport { wrapCollection } from '../common-utils';\n/**\n * This method creates the API for the given organization with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with an organization id, so the base path for requests now has the\n * organization id already set.\n * @private\n * @param http - HTTP client instance\n * @param data - API response for an Organization\n * @return {Organization}\n */\n\nexport function wrapOrganization(http, data) {\n  var org = toPlainObject(cloneDeep(data));\n  var baseURL = (http.defaults.baseURL || '').replace('/spaces/', '/organizations/') + org.sys.id + '/'; // @ts-expect-error\n\n  var orgScopedHttpClient = http.cloneWithNewParams({\n    baseURL: baseURL\n  });\n  var orgApi = createOrganizationApi({\n    http: orgScopedHttpClient\n  });\n  var enhancedOrganization = enhanceWithMethods(org, orgApi);\n  return freezeSys(enhancedOrganization);\n}\n/**\n * This method normalizes each organization in a collection.\n * @private\n */\n\nexport var wrapOrganizationCollection = wrapCollection(wrapOrganization);","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/node_modules/contentful-management/dist/es-modules/entities/organization.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createOrganizationApi","wrapCollection","wrapOrganization","http","data","org","baseURL","defaults","replace","sys","id","orgScopedHttpClient","cloneWithNewParams","orgApi","enhancedOrganization","wrapOrganizationCollection"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA;;;;;;;;;;;AAUA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,IAAhC,EAAsC;AAC3C,MAAIC,GAAG,GAAGP,aAAa,CAACF,SAAS,CAACQ,IAAD,CAAV,CAAvB;AACA,MAAIE,OAAO,GAAG,CAACH,IAAI,CAACI,QAAL,CAAcD,OAAd,IAAyB,EAA1B,EAA8BE,OAA9B,CAAsC,UAAtC,EAAkD,iBAAlD,IAAuEH,GAAG,CAACI,GAAJ,CAAQC,EAA/E,GAAoF,GAAlG,CAF2C,CAE4D;;AAEvG,MAAIC,mBAAmB,GAAGR,IAAI,CAACS,kBAAL,CAAwB;AAChDN,IAAAA,OAAO,EAAEA;AADuC,GAAxB,CAA1B;AAGA,MAAIO,MAAM,GAAGb,qBAAqB,CAAC;AACjCG,IAAAA,IAAI,EAAEQ;AAD2B,GAAD,CAAlC;AAGA,MAAIG,oBAAoB,GAAGf,kBAAkB,CAACM,GAAD,EAAMQ,MAAN,CAA7C;AACA,SAAOhB,SAAS,CAACiB,oBAAD,CAAhB;AACD;AACD;;;;;AAKA,OAAO,IAAIC,0BAA0B,GAAGd,cAAc,CAACC,gBAAD,CAA/C","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport createOrganizationApi from '../create-organization-api';\nimport { wrapCollection } from '../common-utils';\n\n/**\n * This method creates the API for the given organization with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with an organization id, so the base path for requests now has the\n * organization id already set.\n * @private\n * @param http - HTTP client instance\n * @param data - API response for an Organization\n * @return {Organization}\n */\nexport function wrapOrganization(http, data) {\n  var org = toPlainObject(cloneDeep(data));\n  var baseURL = (http.defaults.baseURL || '').replace('/spaces/', '/organizations/') + org.sys.id + '/'; // @ts-expect-error\n\n  var orgScopedHttpClient = http.cloneWithNewParams({\n    baseURL: baseURL\n  });\n  var orgApi = createOrganizationApi({\n    http: orgScopedHttpClient\n  });\n  var enhancedOrganization = enhanceWithMethods(org, orgApi);\n  return freezeSys(enhancedOrganization);\n}\n/**\n * This method normalizes each organization in a collection.\n * @private\n */\n\nexport var wrapOrganizationCollection = wrapCollection(wrapOrganization);"]},"metadata":{},"sourceType":"module"}