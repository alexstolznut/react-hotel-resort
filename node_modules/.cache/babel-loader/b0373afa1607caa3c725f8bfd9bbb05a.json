{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Contentful Space API. Contains methods to access any operations at a space\n * level, such as creating and reading entities contained in a space.\n */\n\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport errorHandler from './error-handler';\nimport entities from './entities';\n\nfunction raiseDeprecationWarning(method) {\n  console.warn([\"Deprecated: Space.\".concat(method, \"() will be removed in future major versions.\"), null, \"Please migrate your code to use Environment.\".concat(method, \"():\"), \"https://contentful.github.io/contentful-management.js/contentful-management/latest/ContentfulEnvironmentAPI.html#.\".concat(method), null].join('\\n'));\n}\n\nfunction spaceMembershipDeprecationWarning() {\n  console.warn('The user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user)');\n}\n/**\n * Creates API object with methods to access the Space API\n * @param {object} params - API initialization params\n * @prop {object} http - HTTP client instance\n * @prop {object} entities - Object with wrapper methods for each kind of entity\n * @return {ContentfulSpaceAPI}\n */\n\n\nexport default function createSpaceApi(_ref) {\n  var http = _ref.http,\n      httpUpload = _ref.httpUpload;\n  var wrapSpace = entities.space.wrapSpace;\n  var _entities$environment = entities.environment,\n      wrapEnvironment = _entities$environment.wrapEnvironment,\n      wrapEnvironmentCollection = _entities$environment.wrapEnvironmentCollection;\n  var _entities$contentType = entities.contentType,\n      wrapContentType = _entities$contentType.wrapContentType,\n      wrapContentTypeCollection = _entities$contentType.wrapContentTypeCollection;\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$asset = entities.asset,\n      wrapAsset = _entities$asset.wrapAsset,\n      wrapAssetCollection = _entities$asset.wrapAssetCollection;\n  var _entities$locale = entities.locale,\n      wrapLocale = _entities$locale.wrapLocale,\n      wrapLocaleCollection = _entities$locale.wrapLocaleCollection;\n  var _entities$webhook = entities.webhook,\n      wrapWebhook = _entities$webhook.wrapWebhook,\n      wrapWebhookCollection = _entities$webhook.wrapWebhookCollection;\n  var _entities$role = entities.role,\n      wrapRole = _entities$role.wrapRole,\n      wrapRoleCollection = _entities$role.wrapRoleCollection;\n  var _entities$user = entities.user,\n      wrapUser = _entities$user.wrapUser,\n      wrapUserCollection = _entities$user.wrapUserCollection;\n  var _entities$spaceMember = entities.spaceMember,\n      wrapSpaceMember = _entities$spaceMember.wrapSpaceMember,\n      wrapSpaceMemberCollection = _entities$spaceMember.wrapSpaceMemberCollection;\n  var _entities$spaceMember2 = entities.spaceMembership,\n      wrapSpaceMembership = _entities$spaceMember2.wrapSpaceMembership,\n      wrapSpaceMembershipCollection = _entities$spaceMember2.wrapSpaceMembershipCollection;\n  var _entities$teamSpaceMe = entities.teamSpaceMembership,\n      wrapTeamSpaceMembership = _entities$teamSpaceMe.wrapTeamSpaceMembership,\n      wrapTeamSpaceMembershipCollection = _entities$teamSpaceMe.wrapTeamSpaceMembershipCollection;\n  var _entities$apiKey = entities.apiKey,\n      wrapApiKey = _entities$apiKey.wrapApiKey,\n      wrapApiKeyCollection = _entities$apiKey.wrapApiKeyCollection;\n  var _entities$previewApiK = entities.previewApiKey,\n      wrapPreviewApiKey = _entities$previewApiK.wrapPreviewApiKey,\n      wrapPreviewApiKeyCollection = _entities$previewApiK.wrapPreviewApiKeyCollection;\n  var wrapSnapshotCollection = entities.snapshot.wrapSnapshotCollection;\n  var wrapEditorInterface = entities.editorInterface.wrapEditorInterface;\n  var wrapUpload = entities.upload.wrapUpload;\n  var _entities$uiExtension = entities.uiExtension,\n      wrapUiExtension = _entities$uiExtension.wrapUiExtension,\n      wrapUiExtensionCollection = _entities$uiExtension.wrapUiExtensionCollection;\n  var _entities$environment2 = entities.environmentAlias,\n      wrapEnvironmentAlias = _entities$environment2.wrapEnvironmentAlias,\n      wrapEnvironmentAliasCollection = _entities$environment2.wrapEnvironmentAliasCollection;\n\n  function createAsset(data) {\n    return http.post('assets', data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  function createUpload(data) {\n    raiseDeprecationWarning('createUpload');\n    var file = data.file;\n\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'));\n    }\n\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    }).then(function (uploadResponse) {\n      return wrapUpload(httpUpload, uploadResponse.data);\n    })[\"catch\"](errorHandler);\n  }\n  /*\n   * @private\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   *\n   */\n\n\n  function normalizeSelect(query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys';\n    }\n  }\n\n  return {\n    /**\n     * Deletes the space\n     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *   .then((space) => space.delete())\n     *   .then(() => console.log('Space deleted.'))\n     *   .catch(console.error)\n     * ```\n     */\n    \"delete\": function deleteSpace() {\n      return http[\"delete\"]('').then(function () {// do nothing\n      }, errorHandler);\n    },\n\n    /**\n     * Updates the space\n     * @return Promise for the updated space.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => {\n     *   space.name = 'New name'\n     *   return space.update()\n     * })\n     * .then((space) => console.log(`Space ${space.sys.id} renamed.`)\n     * .catch(console.error)\n     * ```\n     */\n    update: function updateSpace() {\n      var raw = this.toPlainObject();\n      var data = cloneDeep(raw);\n      delete data.sys;\n      return http.put('', data, {\n        headers: {\n          'X-Contentful-Version': raw.sys.version\n        }\n      }).then(function (response) {\n        return wrapSpace(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an environment\n     * @param id - Environment ID\n     * @return Promise for an Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environement_id>'))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironment: function getEnvironment(id) {\n      return http.get('environments/' + id).then(function (response) {\n        return wrapEnvironment(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Environments\n     * @return Promise for a collection of Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironments())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironments: function getEnvironments() {\n      return http.get('environments').then(function (response) {\n        return wrapEnvironmentCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates an Environement\n     * @param data - Object representation of the Environment to be created\n     * @return Promise for the newly created Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironment({ name: 'Staging' }))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironment: function createEnvironment() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.post('environments', data).then(function (response) {\n        return wrapEnvironment(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates an Environment with a custom ID\n     * @param id - Environment ID\n     * @param data - Object representation of the Environment to be created\n     * @param sourceEnvironmentId - ID of the source environment that will be copied to create the new environment. Default is \"master\"\n     * @return Promise for the newly created Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironmentWithId('<environment-id>', { name: 'Staging'}, 'master'))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironmentWithId: function createEnvironmentWithId(id, data, sourceEnvironmentId) {\n      return http.put('environments/' + id, data, {\n        headers: sourceEnvironmentId ? {\n          'X-Contentful-Source-Environment': sourceEnvironmentId\n        } : {}\n      }).then(function (response) {\n        return wrapEnvironment(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Content Type\n     * @deprecated since version 5.0\n     * @param id - Content Type ID\n     * @return Promise for a Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentType('<content_type_id>'))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    getContentType: function getContentType(id) {\n      raiseDeprecationWarning('getContentType');\n      return http.get('content_types/' + id).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Content Types\n     * @deprecated since version 5.0\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Content Types\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentTypes())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getContentTypes: function getContentTypes() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      raiseDeprecationWarning('getContentTypes');\n      return http.get('content_types', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapContentTypeCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Content Type\n     * @deprecated since version 5.0\n     * @param data - Object representation of the Content Type to be created\n     * @return Promise for the newly created Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createContentType({\n     *   name: 'Blog Post',\n     *   fields: [\n     *     {\n     *       id: 'title',\n     *       name: 'Title',\n     *       required: true,\n     *       localized: false,\n     *       type: 'Text'\n     *     }\n     *   ]\n     * }))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    createContentType: function createContentType(data) {\n      raiseDeprecationWarning('createContentType');\n      return http.post('content_types', data).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Content Type with a custom ID\n     * @deprecated since version 5.0\n     * @param id - Content Type ID\n     * @param data - Object representation of the Content Type to be created\n     * @return Promise for the newly created Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createContentTypeWithId('<content-type-id>', {\n     *   name: 'Blog Post',\n     *   fields: [\n     *     {\n     *       id: 'title',\n     *       name: 'Title',\n     *       required: true,\n     *       localized: false,\n     *       type: 'Text'\n     *     }\n     *   ]\n     * }))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    createContentTypeWithId: function createContentTypeWithId(id, data) {\n      raiseDeprecationWarning('createContentTypeWithId');\n      return http.put('content_types/' + id, data).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an EditorInterface for a ContentType\n     * @deprecated since version 5.0\n     * @param contentTypeId - Content Type ID\n     * @return Promise for an EditorInterface\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEditorInterfaceForContentType('<content_type_id>'))\n     * .then((EditorInterface) => console.log(EditorInterface))\n     * .catch(console.error)\n     * ```\n     */\n    getEditorInterfaceForContentType: function getEditorInterfaceForContentType(contentTypeId) {\n      raiseDeprecationWarning('getEditorInterfaceForContentType');\n      return http.get('content_types/' + contentTypeId + '/editor_interface').then(function (response) {\n        return wrapEditorInterface(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an Entry\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @deprecated since version 5.0\n     * @param id - Entry ID\n     * @param query - Object with search parameters. In this method it's only useful for `locale`.\n     * @return Promise for an Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry-id>'))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    getEntry: function getEntry(id) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      raiseDeprecationWarning('getEntry');\n      normalizeSelect(query);\n      return http.get('entries/' + id, createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Entries\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @deprecated since version 5.0\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Entries\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEntries: function getEntries() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      raiseDeprecationWarning('getEntries');\n      normalizeSelect(query);\n      return http.get('entries', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapEntryCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Entry\n     * @deprecated since version 5.0\n     * @param contentTypeId - The Content Type which this Entry is based on\n     * @param data - Object representation of the Entry to be created\n     * @return Promise for the newly created Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEntry('<content_type_id>', {\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Entry title'\n     *     }\n     *   }\n     * }))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    createEntry: function createEntry(contentTypeId, data) {\n      raiseDeprecationWarning('createEntry');\n      return http.post('entries', data, {\n        headers: {\n          'X-Contentful-Content-Type': contentTypeId\n        }\n      }).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Entry with a custom ID\n     * @deprecated since version 5.0\n     * @param contentTypeId - The Content Type which this Entry is based on\n     * @param id - Entry ID\n     * @param data - Object representation of the Entry to be created\n     * @return Promise for the newly created Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create entry\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEntryWithId('<content_type_id>', '<entry_id>', {\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Entry title'\n     *     }\n     *   }\n     * }))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    createEntryWithId: function createEntryWithId(contentTypeId, id, data) {\n      raiseDeprecationWarning('createEntryWithId');\n      return http.put('entries/' + id, data, {\n        headers: {\n          'X-Contentful-Content-Type': contentTypeId\n        }\n      }).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Upload.\n     * @deprecated since version 5.0\n     * @param data - Object with file information.\n     * @param data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n     * @return Upload object containing information about the uploaded file.\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * const uploadStream = createReadStream('path/to/filename_english.jpg')\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createUpload({file: uploadStream, 'image/png'})\n     * .then((upload) => console.log(upload))\n     * .catch(console.error)\n     * ```\n     */\n    createUpload: createUpload,\n\n    /**\n     * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @deprecated since version 5.0\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create asset\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createAsset({\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Playsam Streamliner'\n     *    },\n     *    file: {\n     *       'en-US': {\n     *         contentType: 'image/jpeg',\n     *        fileName: 'example.jpeg',\n     *        upload: 'https://example.com/example.jpg'\n     *      }\n     *    }\n     *   }\n     * }))\n     * .then((asset) => asset.processForLocale(\"en-US\")) // OR asset.processForAllLocales()\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAsset: createAsset,\n\n    /**\n     * Gets an Asset\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @deprecated since version 5.0\n     * @param id - Asset ID\n     * @param query - Object with search parameters. In this method it's only useful for `locale`.\n     * @return Promise for an Asset\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getAsset('<asset_id>'))\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    getAsset: function getAsset(id) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      raiseDeprecationWarning('getAsset');\n      normalizeSelect(query);\n      return http.get('assets/' + id, createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapAsset(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Assets\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @deprecated since version 5.0\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Assets\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getAssets())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getAssets: function getAssets() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      raiseDeprecationWarning('getAssets');\n      normalizeSelect(query);\n      return http.get('assets', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapAssetCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @deprecated since version 5.0\n     * @param id - Asset ID\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create asset\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createAssetWithId('<asset_id>', {\n     *   title: {\n     *     'en-US': 'Playsam Streamliner'\n     *   },\n     *   file: {\n     *     'en-US': {\n     *       contentType: 'image/jpeg',\n     *       fileName: 'example.jpeg',\n     *       upload: 'https://example.com/example.jpg'\n     *     }\n     *   }\n     * }))\n     * .then((asset) => asset.process())\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAssetWithId: function createAssetWithId(id, data) {\n      raiseDeprecationWarning('createAssetWithId');\n      return http.put('assets/' + id, data).then(function (response) {\n        return wrapAsset(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @deprecated since version 5.0\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @param data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createAssetFromFiles({\n     *   fields: {\n     *     file: {\n     *       'en-US': {\n     *          contentType: 'image/jpeg',\n     *          fileName: 'filename_english.jpg',\n     *          file: createReadStream('path/to/filename_english.jpg')\n     *       },\n     *       'de-DE': {\n     *          contentType: 'image/svg+xml',\n     *          fileName: 'filename_german.svg',\n     *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n     *       }\n     *     }\n     *   }\n     * }))\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAssetFromFiles: function createAssetFromFiles(data) {\n      raiseDeprecationWarning('createAssetFromFiles');\n      var file = data.fields.file;\n      return Promise.all(Object.keys(file).map(function (locale) {\n        var _file$locale = file[locale],\n            contentType = _file$locale.contentType,\n            fileName = _file$locale.fileName;\n        return createUpload(file[locale]).then(function (upload) {\n          return _defineProperty({}, locale, {\n            contentType: contentType,\n            fileName: fileName,\n            uploadFrom: {\n              sys: {\n                type: 'Link',\n                linkType: 'Upload',\n                id: upload.sys.id\n              }\n            }\n          });\n        });\n      })).then(function (uploads) {\n        // @ts-expect-error\n        data.fields.file = uploads.reduce(function (fieldsData, upload) {\n          return _objectSpread(_objectSpread({}, fieldsData), upload);\n        }, {});\n        return createAsset(data);\n      })[\"catch\"](errorHandler);\n    },\n\n    /**\n     * Gets an Upload\n     * @deprecated since version 5.0\n     * @param id - Upload ID\n     * @return Promise for an Upload\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * const uploadStream = createReadStream('path/to/filename_english.jpg')\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUpload('<upload-id>')\n     * .then((upload) => console.log(upload))\n     * .catch(console.error)\n     * ```\n     */\n    getUpload: function getUpload(id) {\n      raiseDeprecationWarning('getUpload');\n      return httpUpload.get('uploads/' + id).then(function (response) {\n        return wrapUpload(http, response.data);\n      })[\"catch\"](errorHandler);\n    },\n\n    /**\n     * Gets a Locale\n     * @deprecated since version 5.0\n     * @param id - Locale ID\n     * @return Promise for an Locale\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getLocale('<locale_id>'))\n     * .then((locale) => console.log(locale))\n     * .catch(console.error)\n     * ```\n     */\n    getLocale: function getLocale(id) {\n      raiseDeprecationWarning('getLocale');\n      return http.get('locales/' + id).then(function (response) {\n        return wrapLocale(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Locales\n     * @deprecated since version 5.0\n     * @return Promise for a collection of Locales\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getLocales())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getLocales: function getLocales() {\n      raiseDeprecationWarning('getLocales');\n      return http.get('locales').then(function (response) {\n        return wrapLocaleCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Locale\n     * @deprecated since version 5.0\n     * @param data - Object representation of the Locale to be created\n     * @return Promise for the newly created Locale\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create locale\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createLocale({\n     *   name: 'German (Austria)',\n     *   code: 'de-AT',\n     *   fallbackCode: 'de-DE',\n     *   optional: true\n     * }))\n     * .then((locale) => console.log(locale))\n     * .catch(console.error)\n     * ```\n     */\n    createLocale: function createLocale(data) {\n      raiseDeprecationWarning('createLocale');\n      return http.post('locales', data).then(function (response) {\n        return wrapLocale(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Webhook\n     * @param id - Webhook ID\n     * @return Promise for a Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    getWebhook: function getWebhook(id) {\n      return http.get('webhook_definitions/' + id).then(function (response) {\n        return wrapWebhook(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Webhooks\n     * @return Promise for a collection of Webhooks\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhooks())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getWebhooks: function getWebhooks() {\n      return http.get('webhook_definitions').then(function (response) {\n        return wrapWebhookCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Webhook\n     * @param data - Object representation of the Webhook to be created\n     * @return Promise for the newly created Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createWebhook({\n     *   'name': 'My webhook',\n     *   'url': 'https://www.example.com/test',\n     *   'topics': [\n     *     'Entry.create',\n     *     'ContentType.create',\n     *     '*.publish',\n     *     'Asset.*'\n     *   ]\n     * }))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    createWebhook: function createWebhook(data) {\n      return http.post('webhook_definitions', data).then(function (response) {\n        return wrapWebhook(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Webhook with a custom ID\n     * @param id - Webhook ID\n     * @param  data - Object representation of the Webhook to be created\n     * @return Promise for the newly created Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createWebhookWithId('<webhook_id>', {\n     *   'name': 'My webhook',\n     *   'url': 'https://www.example.com/test',\n     *   'topics': [\n     *     'Entry.create',\n     *     'ContentType.create',\n     *     '*.publish',\n     *     'Asset.*'\n     *   ]\n     * }))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    createWebhookWithId: function createWebhookWithId(id, data) {\n      return http.put('webhook_definitions/' + id, data).then(function (response) {\n        return wrapWebhook(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Role\n     * @param id - Role ID\n     * @return Promise for a Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRole({\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Role title'\n     *     }\n     *   }\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    getRole: function getRole(id) {\n      return http.get('roles/' + id).then(function (response) {\n        return wrapRole(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Roles\n     * @return Promise for a collection of Roles\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getRoles())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getRoles: function getRoles() {\n      return http.get('roles').then(function (response) {\n        return wrapRoleCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Role\n     * @param data - Object representation of the Role to be created\n     * @return  Promise for the newly created Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRole({\n     *   name: 'My Role',\n     *   description: 'foobar role',\n     *   permissions: {\n     *     ContentDelivery: 'all',\n     *     ContentModel: ['read'],\n     *     Settings: []\n     *   },\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       actions: 'all',\n     *       constraint: {\n     *         and: [\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Entry'\n     *             ]\n     *           },\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Asset'\n     *             ]\n     *           }\n     *         ]\n     *       }\n     *     }\n     *   ]\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    createRole: function createRole(data) {\n      return http.post('roles', data).then(function (response) {\n        return wrapRole(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Role with a custom ID\n     * @param id - Role ID\n     * @param data - Object representation of the Role to be created\n     * @return Promise for the newly created Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRoleWithId('<role-id>', {\n     *   name: 'My Role',\n     *   description: 'foobar role',\n     *   permissions: {\n     *     ContentDelivery: 'all',\n     *     ContentModel: ['read'],\n     *     Settings: []\n     *   },\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       actions: 'all',\n     *       constraint: {\n     *         and: [\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Entry'\n     *             ]\n     *           },\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Asset'\n     *             ]\n     *           }\n     *         ]\n     *       }\n     *     }\n     *   ]\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    createRoleWithId: function createRoleWithId(id, data) {\n      return http.put('roles/' + id, data).then(function (response) {\n        return wrapRole(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a User\n     * @param id - User ID\n     * @return Promise for a User\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceUser('id'))\n     * .then((user) => console.log(user))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceUser: function getSpaceUser(id) {\n      return http.get('users/' + id).then(function (response) {\n        return wrapUser(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Users in a space\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise a collection of Users in a space\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceUsers(query))\n     * .then((data) => console.log(data))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceUsers: function getSpaceUsers() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('users/', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapUserCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Space Member\n     * @param id Get Space Member by user_id\n     * @return Promise for a Space Member\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMember(id))\n     * .then((spaceMember) => console.log(spaceMember))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMember: function getSpaceMember(id) {\n      return http.get('space_members/' + id).then(function (response) {\n        return wrapSpaceMember(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Space Members\n     * @param query\n     * @return Promise for a collection of Space Members\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembers({'limit': 100}))\n     * .then((spaceMemberCollection) => console.log(spaceMemberCollection))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMembers: function getSpaceMembers() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('space_members', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSpaceMemberCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Space Membership\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param id - Space Membership ID\n     * @return Promise for a Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembership('id'))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMembership: function getSpaceMembership(id) {\n      spaceMembershipDeprecationWarning();\n      return http.get('space_memberships/' + id).then(function (response) {\n        return wrapSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Space Memberships\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Space Memberships\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMemberships({'limit': 100})) // you can add more queries as 'key': 'value'\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMemberships: function getSpaceMemberships() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      spaceMembershipDeprecationWarning();\n      return http.get('space_memberships', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSpaceMembershipCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Space Membership\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param  data - Object representation of the Space Membership to be created\n     * @return Promise for the newly created Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createSpaceMembership({\n     *   admin: false,\n     *   roles: [\n     *     {\n     *       type: 'Link',\n     *       linkType: 'Role',\n     *       id: '<role_id>'\n     *     }\n     *   ],\n     *   email: 'foo@example.com'\n     * }))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    createSpaceMembership: function createSpaceMembership(data) {\n      spaceMembershipDeprecationWarning();\n      return http.post('space_memberships', data).then(function (response) {\n        return wrapSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Space Membership with a custom ID\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param id - Space Membership ID\n     * @param data - Object representation of the Space Membership to be created\n     * @return Promise for the newly created Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createSpaceMembershipWithId('<space-membership-id>', {\n     *   admin: false,\n     *   roles: [\n     *     {\n     *       type: 'Link',\n     *       linkType: 'Role',\n     *       id: '<role_id>'\n     *     }\n     *   ],\n     *   email: 'foo@example.com'\n     * }))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    createSpaceMembershipWithId: function createSpaceMembershipWithId(id, data) {\n      spaceMembershipDeprecationWarning();\n      return http.put('space_memberships/' + id, data).then(function (response) {\n        return wrapSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Team Space Membership\n     * @param id - Team Space Membership ID\n     * @return Promise for a Team Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeamSpaceMembership('team_space_membership_id'))\n     * .then((teamSpaceMembership) => console.log(teamSpaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    getTeamSpaceMembership: function getTeamSpaceMembership(teamSpaceMembershipId) {\n      return http.get('team_space_memberships/' + teamSpaceMembershipId).then(function (response) {\n        return wrapTeamSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Team Space Memberships\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Team Space Memberships\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeamSpaceMemberships())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getTeamSpaceMemberships: function getTeamSpaceMemberships() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('team_space_memberships', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapTeamSpaceMembershipCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n    * Creates a Team Space Membership\n    * @param id - Team ID\n    * @param data - Object representation of the Team Space Membership to be created\n    * @return Promise for the newly created Team Space Membership\n    * @example ```javascript\n    * const contentful = require('contentful-management')\n    *\n    * const client = contentful.createClient({\n    *   accessToken: '<content_management_api_key>'\n    * })\n    *\n    * client.getSpace('<space_id>')\n    * .then((space) => space.createTeamSpaceMembership('team_id', {\n    *   admin: false,\n    *   roles: [\n    *    {\n          sys: {\n    *       type: 'Link',\n    *       linkType: 'Role',\n    *       id: '<role_id>'\n    *      }\n    *    }\n    *   ],\n    * }))\n    * .then((teamSpaceMembership) => console.log(teamSpaceMembership))\n    * .catch(console.error)\n    * ```\n    */\n    createTeamSpaceMembership: function createTeamSpaceMembership(teamId, data) {\n      return http.post('team_space_memberships', data, {\n        headers: {\n          'x-contentful-team': teamId\n        }\n      }).then(function (response) {\n        return wrapTeamSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Api Key\n     * @param id - API Key ID\n     * @return  Promise for a Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKey('<apikey-id>'))\n     * .then((apikey) => console.log(apikey))\n     * .catch(console.error)\n     * ```\n     */\n    getApiKey: function getApiKey(id) {\n      return http.get('api_keys/' + id).then(function (response) {\n        return wrapApiKey(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Api Keys\n     * @return Promise for a collection of Api Keys\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKeys())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getApiKeys: function getApiKeys() {\n      return http.get('api_keys').then(function (response) {\n        return wrapApiKeyCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of preview Api Keys\n     * @return Promise for a collection of Preview Api Keys\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getPreviewApiKeys())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getPreviewApiKeys: function getPreviewApiKeys() {\n      return http.get('preview_api_keys').then(function (response) {\n        return wrapPreviewApiKeyCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a preview Api Key\n     * @param id - Preview API Key ID\n     * @return  Promise for a Preview Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getPreviewApiKey('<preview-apikey-id>'))\n     * .then((previewApikey) => console.log(previewApikey))\n     * .catch(console.error)\n     * ```\n     */\n    getPreviewApiKey: function getPreviewApiKey(id) {\n      return http.get('preview_api_keys/' + id).then(function (response) {\n        return wrapPreviewApiKey(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Api Key\n     * @param data - Object representation of the Api Key to be created\n     * @return Promise for the newly created Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createApiKey({\n     *   name: 'API Key name',\n     *   environments:[\n     *    {\n     *     sys: {\n     *      type: 'Link'\n     *      linkType: 'Environment',\n     *      id:'<environment_id>'\n     *     }\n     *    }\n     *   ]\n     *   }\n     * }))\n     * .then((apiKey) => console.log(apiKey))\n     * .catch(console.error)\n     * ```\n     */\n    createApiKey: function createApiKey(data) {\n      return http.post('api_keys', data).then(function (response) {\n        return wrapApiKey(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Api Key with a custom ID\n     * @param id - Api Key ID\n     * @param data - Object representation of the Api Key to be created\n     * @return Promise for the newly created Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createApiKeyWithId('<api-key-id>', {\n     *   name: 'API Key name'\n     *   environments:[\n     *    {\n     *     sys: {\n     *      type: 'Link'\n     *      linkType: 'Environment',\n     *      id:'<environment_id>'\n     *     }\n     *    }\n     *   ]\n     *   }\n     * }))\n     * .then((apiKey) => console.log(apiKey))\n     * .catch(console.error)\n     * ```\n     */\n    createApiKeyWithId: function createApiKeyWithId(id, data) {\n      return http.put('api_keys/' + id, data).then(function (response) {\n        return wrapApiKey(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an UI Extension\n     * @deprecated since version 5.0\n     * @param id - UI Extension ID\n     * @return Promise for an UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUiExtension('<extension-id>'))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    getUiExtension: function getUiExtension(id) {\n      raiseDeprecationWarning('getUiExtension');\n      return http.get('extensions/' + id).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of UI Extension\n     * @deprecated since version 5.0\n     * @return Promise for a collection of UI Extensions\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUiExtensions()\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getUiExtensions: function getUiExtensions() {\n      raiseDeprecationWarning('getUiExtensions');\n      return http.get('extensions').then(function (response) {\n        return wrapUiExtensionCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a UI Extension\n     * @deprecated since version 5.0\n     * @param data - Object representation of the UI Extension to be created\n     * @return Promise for the newly created UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createUiExtension({\n     *   extension: {\n     *     name: 'My awesome extension',\n     *     src: 'https://example.com/my',\n     *     fieldTypes: [\n     *       {\n     *         type: 'Symbol'\n     *       },\n     *       {\n     *         type: 'Text'\n     *       }\n     *     ],\n     *     sidebar: false\n     *   }\n     * }))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    createUiExtension: function createUiExtension(data) {\n      raiseDeprecationWarning('createUiExtension');\n      return http.post('extensions', data).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a UI Extension with a custom ID\n     * @deprecated since version 5.0\n     * @param id - UI Extension ID\n     * @param data - Object representation of the UI Extension to be created\n     * @return Promise for the newly created UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createUiExtensionWithId('<extension_id>', {\n     *   extension: {\n     *     name: 'My awesome extension',\n     *     src: 'https://example.com/my',\n     *     fieldTypes: [\n     *       {\n     *         type: 'Symbol'\n     *       },\n     *       {\n     *         type: 'Text'\n     *       }\n     *     ],\n     *     sidebar: false\n     *   }\n     * }))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    createUiExtensionWithId: function createUiExtensionWithId(id, data) {\n      raiseDeprecationWarning('createUiExtensionWithId');\n      return http.put('extensions/' + id, data).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets all snapshots of an entry\n     * @deprecated since version 5.0\n     * @param entryId - Entry ID\n     * @param query - additional query paramaters\n     * @return Promise for a collection of Entry Snapshots\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntrySnapshots('<entry_id>'))\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEntrySnapshots: function getEntrySnapshots(entryId) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      raiseDeprecationWarning('getEntrySnapshots');\n      return http.get(\"entries/\".concat(entryId, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets all snapshots of a contentType\n     * @deprecated since version 5.0\n     * @param contentTypeId - Content Type ID\n     * @param query - additional query paramaters\n     * @return Promise for a collection of Content Type Snapshots\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentTypeSnapshots('<contentTypeId>'))\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getContentTypeSnapshots: function getContentTypeSnapshots(contentTypeId) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      raiseDeprecationWarning('getContentTypeSnapshots');\n      return http.get(\"content_types/\".concat(contentTypeId, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an Environment Alias\n     * @param Environment Alias ID\n     * @return Promise for an Environment Alias\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironmentAlias('<alias-id>'))\n     * .then((alias) => console.log(alias))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironmentAlias: function getEnvironmentAlias(id) {\n      return http.get('environment_aliases/' + id).then(function (response) {\n        return wrapEnvironmentAlias(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Environment Aliases\n     * @return Promise for a collection of Environment Aliases\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironmentAliases()\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironmentAliases: function getEnvironmentAliases() {\n      return http.get('environment_aliases').then(function (response) {\n        return wrapEnvironmentAliasCollection(http, response.data);\n      }, errorHandler);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/node_modules/contentful-management/dist/es-modules/create-space-api.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","cloneDeep","createRequestConfig","errorHandler","entities","raiseDeprecationWarning","method","console","warn","concat","join","spaceMembershipDeprecationWarning","createSpaceApi","_ref","http","httpUpload","wrapSpace","space","_entities$environment","environment","wrapEnvironment","wrapEnvironmentCollection","_entities$contentType","contentType","wrapContentType","wrapContentTypeCollection","_entities$entry","entry","wrapEntry","wrapEntryCollection","_entities$asset","asset","wrapAsset","wrapAssetCollection","_entities$locale","locale","wrapLocale","wrapLocaleCollection","_entities$webhook","webhook","wrapWebhook","wrapWebhookCollection","_entities$role","role","wrapRole","wrapRoleCollection","_entities$user","user","wrapUser","wrapUserCollection","_entities$spaceMember","spaceMember","wrapSpaceMember","wrapSpaceMemberCollection","_entities$spaceMember2","spaceMembership","wrapSpaceMembership","wrapSpaceMembershipCollection","_entities$teamSpaceMe","teamSpaceMembership","wrapTeamSpaceMembership","wrapTeamSpaceMembershipCollection","_entities$apiKey","apiKey","wrapApiKey","wrapApiKeyCollection","_entities$previewApiK","previewApiKey","wrapPreviewApiKey","wrapPreviewApiKeyCollection","wrapSnapshotCollection","snapshot","wrapEditorInterface","editorInterface","wrapUpload","upload","_entities$uiExtension","uiExtension","wrapUiExtension","wrapUiExtensionCollection","_entities$environment2","environmentAlias","wrapEnvironmentAlias","wrapEnvironmentAliasCollection","createAsset","data","post","then","response","createUpload","file","Promise","reject","Error","headers","uploadResponse","normalizeSelect","query","select","test","deleteSpace","update","updateSpace","raw","toPlainObject","sys","put","version","getEnvironment","id","get","getEnvironments","createEnvironment","undefined","createEnvironmentWithId","sourceEnvironmentId","getContentType","getContentTypes","createContentType","createContentTypeWithId","getEditorInterfaceForContentType","contentTypeId","getEntry","getEntries","createEntry","createEntryWithId","getAsset","getAssets","createAssetWithId","createAssetFromFiles","fields","all","map","_file$locale","fileName","uploadFrom","type","linkType","uploads","reduce","fieldsData","getUpload","getLocale","getLocales","createLocale","getWebhook","getWebhooks","createWebhook","createWebhookWithId","getRole","getRoles","createRole","createRoleWithId","getSpaceUser","getSpaceUsers","getSpaceMember","getSpaceMembers","getSpaceMembership","getSpaceMemberships","createSpaceMembership","createSpaceMembershipWithId","getTeamSpaceMembership","teamSpaceMembershipId","getTeamSpaceMemberships","createTeamSpaceMembership","teamId","getApiKey","getApiKeys","getPreviewApiKeys","getPreviewApiKey","createApiKey","createApiKeyWithId","getUiExtension","getUiExtensions","createUiExtension","createUiExtensionWithId","getEntrySnapshots","entryId","getContentTypeSnapshots","getEnvironmentAlias","getEnvironmentAliases"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Contentful Space API. Contains methods to access any operations at a space\n * level, such as creating and reading entities contained in a space.\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport { createRequestConfig } from 'contentful-sdk-core';\nimport errorHandler from './error-handler';\nimport entities from './entities';\n\nfunction raiseDeprecationWarning(method) {\n  console.warn([\"Deprecated: Space.\".concat(method, \"() will be removed in future major versions.\"), null, \"Please migrate your code to use Environment.\".concat(method, \"():\"), \"https://contentful.github.io/contentful-management.js/contentful-management/latest/ContentfulEnvironmentAPI.html#.\".concat(method), null].join('\\n'));\n}\n\nfunction spaceMembershipDeprecationWarning() {\n  console.warn('The user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user)');\n}\n\n/**\n * Creates API object with methods to access the Space API\n * @param {object} params - API initialization params\n * @prop {object} http - HTTP client instance\n * @prop {object} entities - Object with wrapper methods for each kind of entity\n * @return {ContentfulSpaceAPI}\n */\nexport default function createSpaceApi(_ref) {\n  var http = _ref.http,\n      httpUpload = _ref.httpUpload;\n  var wrapSpace = entities.space.wrapSpace;\n  var _entities$environment = entities.environment,\n      wrapEnvironment = _entities$environment.wrapEnvironment,\n      wrapEnvironmentCollection = _entities$environment.wrapEnvironmentCollection;\n  var _entities$contentType = entities.contentType,\n      wrapContentType = _entities$contentType.wrapContentType,\n      wrapContentTypeCollection = _entities$contentType.wrapContentTypeCollection;\n  var _entities$entry = entities.entry,\n      wrapEntry = _entities$entry.wrapEntry,\n      wrapEntryCollection = _entities$entry.wrapEntryCollection;\n  var _entities$asset = entities.asset,\n      wrapAsset = _entities$asset.wrapAsset,\n      wrapAssetCollection = _entities$asset.wrapAssetCollection;\n  var _entities$locale = entities.locale,\n      wrapLocale = _entities$locale.wrapLocale,\n      wrapLocaleCollection = _entities$locale.wrapLocaleCollection;\n  var _entities$webhook = entities.webhook,\n      wrapWebhook = _entities$webhook.wrapWebhook,\n      wrapWebhookCollection = _entities$webhook.wrapWebhookCollection;\n  var _entities$role = entities.role,\n      wrapRole = _entities$role.wrapRole,\n      wrapRoleCollection = _entities$role.wrapRoleCollection;\n  var _entities$user = entities.user,\n      wrapUser = _entities$user.wrapUser,\n      wrapUserCollection = _entities$user.wrapUserCollection;\n  var _entities$spaceMember = entities.spaceMember,\n      wrapSpaceMember = _entities$spaceMember.wrapSpaceMember,\n      wrapSpaceMemberCollection = _entities$spaceMember.wrapSpaceMemberCollection;\n  var _entities$spaceMember2 = entities.spaceMembership,\n      wrapSpaceMembership = _entities$spaceMember2.wrapSpaceMembership,\n      wrapSpaceMembershipCollection = _entities$spaceMember2.wrapSpaceMembershipCollection;\n  var _entities$teamSpaceMe = entities.teamSpaceMembership,\n      wrapTeamSpaceMembership = _entities$teamSpaceMe.wrapTeamSpaceMembership,\n      wrapTeamSpaceMembershipCollection = _entities$teamSpaceMe.wrapTeamSpaceMembershipCollection;\n  var _entities$apiKey = entities.apiKey,\n      wrapApiKey = _entities$apiKey.wrapApiKey,\n      wrapApiKeyCollection = _entities$apiKey.wrapApiKeyCollection;\n  var _entities$previewApiK = entities.previewApiKey,\n      wrapPreviewApiKey = _entities$previewApiK.wrapPreviewApiKey,\n      wrapPreviewApiKeyCollection = _entities$previewApiK.wrapPreviewApiKeyCollection;\n  var wrapSnapshotCollection = entities.snapshot.wrapSnapshotCollection;\n  var wrapEditorInterface = entities.editorInterface.wrapEditorInterface;\n  var wrapUpload = entities.upload.wrapUpload;\n  var _entities$uiExtension = entities.uiExtension,\n      wrapUiExtension = _entities$uiExtension.wrapUiExtension,\n      wrapUiExtensionCollection = _entities$uiExtension.wrapUiExtensionCollection;\n  var _entities$environment2 = entities.environmentAlias,\n      wrapEnvironmentAlias = _entities$environment2.wrapEnvironmentAlias,\n      wrapEnvironmentAliasCollection = _entities$environment2.wrapEnvironmentAliasCollection;\n\n  function createAsset(data) {\n    return http.post('assets', data).then(function (response) {\n      return wrapAsset(http, response.data);\n    }, errorHandler);\n  }\n\n  function createUpload(data) {\n    raiseDeprecationWarning('createUpload');\n    var file = data.file;\n\n    if (!file) {\n      return Promise.reject(new Error('Unable to locate a file to upload.'));\n    }\n\n    return httpUpload.post('uploads', file, {\n      headers: {\n        'Content-Type': 'application/octet-stream'\n      }\n    }).then(function (uploadResponse) {\n      return wrapUpload(httpUpload, uploadResponse.data);\n    })[\"catch\"](errorHandler);\n  }\n  /*\n   * @private\n   * sdk relies heavily on sys metadata\n   * so we cannot omit the sys property on sdk level\n   *\n   */\n\n\n  function normalizeSelect(query) {\n    if (query.select && !/sys/i.test(query.select)) {\n      query.select += ',sys';\n    }\n  }\n\n  return {\n    /**\n     * Deletes the space\n     * @return Promise for the deletion. It contains no data, but the Promise error case should be handled.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     *   .then((space) => space.delete())\n     *   .then(() => console.log('Space deleted.'))\n     *   .catch(console.error)\n     * ```\n     */\n    \"delete\": function deleteSpace() {\n      return http[\"delete\"]('').then(function () {// do nothing\n      }, errorHandler);\n    },\n\n    /**\n     * Updates the space\n     * @return Promise for the updated space.\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => {\n     *   space.name = 'New name'\n     *   return space.update()\n     * })\n     * .then((space) => console.log(`Space ${space.sys.id} renamed.`)\n     * .catch(console.error)\n     * ```\n     */\n    update: function updateSpace() {\n      var raw = this.toPlainObject();\n      var data = cloneDeep(raw);\n      delete data.sys;\n      return http.put('', data, {\n        headers: {\n          'X-Contentful-Version': raw.sys.version\n        }\n      }).then(function (response) {\n        return wrapSpace(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an environment\n     * @param id - Environment ID\n     * @return Promise for an Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironment('<environement_id>'))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironment: function getEnvironment(id) {\n      return http.get('environments/' + id).then(function (response) {\n        return wrapEnvironment(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Environments\n     * @return Promise for a collection of Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironments())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironments: function getEnvironments() {\n      return http.get('environments').then(function (response) {\n        return wrapEnvironmentCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates an Environement\n     * @param data - Object representation of the Environment to be created\n     * @return Promise for the newly created Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironment({ name: 'Staging' }))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironment: function createEnvironment() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.post('environments', data).then(function (response) {\n        return wrapEnvironment(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates an Environment with a custom ID\n     * @param id - Environment ID\n     * @param data - Object representation of the Environment to be created\n     * @param sourceEnvironmentId - ID of the source environment that will be copied to create the new environment. Default is \"master\"\n     * @return Promise for the newly created Environment\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEnvironmentWithId('<environment-id>', { name: 'Staging'}, 'master'))\n     * .then((environment) => console.log(environment))\n     * .catch(console.error)\n     * ```\n     */\n    createEnvironmentWithId: function createEnvironmentWithId(id, data, sourceEnvironmentId) {\n      return http.put('environments/' + id, data, {\n        headers: sourceEnvironmentId ? {\n          'X-Contentful-Source-Environment': sourceEnvironmentId\n        } : {}\n      }).then(function (response) {\n        return wrapEnvironment(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Content Type\n     * @deprecated since version 5.0\n     * @param id - Content Type ID\n     * @return Promise for a Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentType('<content_type_id>'))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    getContentType: function getContentType(id) {\n      raiseDeprecationWarning('getContentType');\n      return http.get('content_types/' + id).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Content Types\n     * @deprecated since version 5.0\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Content Types\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentTypes())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getContentTypes: function getContentTypes() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      raiseDeprecationWarning('getContentTypes');\n      return http.get('content_types', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapContentTypeCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Content Type\n     * @deprecated since version 5.0\n     * @param data - Object representation of the Content Type to be created\n     * @return Promise for the newly created Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createContentType({\n     *   name: 'Blog Post',\n     *   fields: [\n     *     {\n     *       id: 'title',\n     *       name: 'Title',\n     *       required: true,\n     *       localized: false,\n     *       type: 'Text'\n     *     }\n     *   ]\n     * }))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    createContentType: function createContentType(data) {\n      raiseDeprecationWarning('createContentType');\n      return http.post('content_types', data).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Content Type with a custom ID\n     * @deprecated since version 5.0\n     * @param id - Content Type ID\n     * @param data - Object representation of the Content Type to be created\n     * @return Promise for the newly created Content Type\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createContentTypeWithId('<content-type-id>', {\n     *   name: 'Blog Post',\n     *   fields: [\n     *     {\n     *       id: 'title',\n     *       name: 'Title',\n     *       required: true,\n     *       localized: false,\n     *       type: 'Text'\n     *     }\n     *   ]\n     * }))\n     * .then((contentType) => console.log(contentType))\n     * .catch(console.error)\n     * ```\n     */\n    createContentTypeWithId: function createContentTypeWithId(id, data) {\n      raiseDeprecationWarning('createContentTypeWithId');\n      return http.put('content_types/' + id, data).then(function (response) {\n        return wrapContentType(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an EditorInterface for a ContentType\n     * @deprecated since version 5.0\n     * @param contentTypeId - Content Type ID\n     * @return Promise for an EditorInterface\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEditorInterfaceForContentType('<content_type_id>'))\n     * .then((EditorInterface) => console.log(EditorInterface))\n     * .catch(console.error)\n     * ```\n     */\n    getEditorInterfaceForContentType: function getEditorInterfaceForContentType(contentTypeId) {\n      raiseDeprecationWarning('getEditorInterfaceForContentType');\n      return http.get('content_types/' + contentTypeId + '/editor_interface').then(function (response) {\n        return wrapEditorInterface(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an Entry\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @deprecated since version 5.0\n     * @param id - Entry ID\n     * @param query - Object with search parameters. In this method it's only useful for `locale`.\n     * @return Promise for an Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntry('<entry-id>'))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    getEntry: function getEntry(id) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      raiseDeprecationWarning('getEntry');\n      normalizeSelect(query);\n      return http.get('entries/' + id, createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Entries\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @deprecated since version 5.0\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Entries\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntries({'content_type': 'foo'})) // you can add more queries as 'key': 'value'\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEntries: function getEntries() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      raiseDeprecationWarning('getEntries');\n      normalizeSelect(query);\n      return http.get('entries', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapEntryCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Entry\n     * @deprecated since version 5.0\n     * @param contentTypeId - The Content Type which this Entry is based on\n     * @param data - Object representation of the Entry to be created\n     * @return Promise for the newly created Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEntry('<content_type_id>', {\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Entry title'\n     *     }\n     *   }\n     * }))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    createEntry: function createEntry(contentTypeId, data) {\n      raiseDeprecationWarning('createEntry');\n      return http.post('entries', data, {\n        headers: {\n          'X-Contentful-Content-Type': contentTypeId\n        }\n      }).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Entry with a custom ID\n     * @deprecated since version 5.0\n     * @param contentTypeId - The Content Type which this Entry is based on\n     * @param id - Entry ID\n     * @param data - Object representation of the Entry to be created\n     * @return Promise for the newly created Entry\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create entry\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createEntryWithId('<content_type_id>', '<entry_id>', {\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Entry title'\n     *     }\n     *   }\n     * }))\n     * .then((entry) => console.log(entry))\n     * .catch(console.error)\n     * ```\n     */\n    createEntryWithId: function createEntryWithId(contentTypeId, id, data) {\n      raiseDeprecationWarning('createEntryWithId');\n      return http.put('entries/' + id, data, {\n        headers: {\n          'X-Contentful-Content-Type': contentTypeId\n        }\n      }).then(function (response) {\n        return wrapEntry(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Upload.\n     * @deprecated since version 5.0\n     * @param data - Object with file information.\n     * @param data.file - Actual file content. Can be a string, an ArrayBuffer or a Stream.\n     * @return Upload object containing information about the uploaded file.\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * const uploadStream = createReadStream('path/to/filename_english.jpg')\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createUpload({file: uploadStream, 'image/png'})\n     * .then((upload) => console.log(upload))\n     * .catch(console.error)\n     * ```\n     */\n    createUpload: createUpload,\n\n    /**\n     * Creates a Asset. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @deprecated since version 5.0\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create asset\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createAsset({\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Playsam Streamliner'\n     *    },\n     *    file: {\n     *       'en-US': {\n     *         contentType: 'image/jpeg',\n     *        fileName: 'example.jpeg',\n     *        upload: 'https://example.com/example.jpg'\n     *      }\n     *    }\n     *   }\n     * }))\n     * .then((asset) => asset.processForLocale(\"en-US\")) // OR asset.processForAllLocales()\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAsset: createAsset,\n\n    /**\n     * Gets an Asset\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @deprecated since version 5.0\n     * @param id - Asset ID\n     * @param query - Object with search parameters. In this method it's only useful for `locale`.\n     * @return Promise for an Asset\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getAsset('<asset_id>'))\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    getAsset: function getAsset(id) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      raiseDeprecationWarning('getAsset');\n      normalizeSelect(query);\n      return http.get('assets/' + id, createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapAsset(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Assets\n     * Warning: if you are using the select operator, when saving, any field that was not selected will be removed\n     * from your entry in the backend\n     * @deprecated since version 5.0\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Assets\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getAssets())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getAssets: function getAssets() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      raiseDeprecationWarning('getAssets');\n      normalizeSelect(query);\n      return http.get('assets', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapAssetCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Asset with a custom ID. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @deprecated since version 5.0\n     * @param id - Asset ID\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an upload property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create asset\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createAssetWithId('<asset_id>', {\n     *   title: {\n     *     'en-US': 'Playsam Streamliner'\n     *   },\n     *   file: {\n     *     'en-US': {\n     *       contentType: 'image/jpeg',\n     *       fileName: 'example.jpeg',\n     *       upload: 'https://example.com/example.jpg'\n     *     }\n     *   }\n     * }))\n     * .then((asset) => asset.process())\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAssetWithId: function createAssetWithId(id, data) {\n      raiseDeprecationWarning('createAssetWithId');\n      return http.put('assets/' + id, data).then(function (response) {\n        return wrapAsset(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Asset based on files. After creation, call asset.processForLocale or asset.processForAllLocales to start asset processing.\n     * @deprecated since version 5.0\n     * @param data - Object representation of the Asset to be created. Note that the field object should have an uploadFrom property on asset creation, which will be removed and replaced with an url property when processing is finished.\n     * @param data.fields.file.[LOCALE].file - Can be a string, an ArrayBuffer or a Stream.\n     * @return Promise for the newly created Asset\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createAssetFromFiles({\n     *   fields: {\n     *     file: {\n     *       'en-US': {\n     *          contentType: 'image/jpeg',\n     *          fileName: 'filename_english.jpg',\n     *          file: createReadStream('path/to/filename_english.jpg')\n     *       },\n     *       'de-DE': {\n     *          contentType: 'image/svg+xml',\n     *          fileName: 'filename_german.svg',\n     *          file: '<svg><path fill=\"red\" d=\"M50 50h150v50H50z\"/></svg>'\n     *       }\n     *     }\n     *   }\n     * }))\n     * .then((asset) => console.log(asset))\n     * .catch(console.error)\n     * ```\n     */\n    createAssetFromFiles: function createAssetFromFiles(data) {\n      raiseDeprecationWarning('createAssetFromFiles');\n      var file = data.fields.file;\n      return Promise.all(Object.keys(file).map(function (locale) {\n        var _file$locale = file[locale],\n            contentType = _file$locale.contentType,\n            fileName = _file$locale.fileName;\n        return createUpload(file[locale]).then(function (upload) {\n          return _defineProperty({}, locale, {\n            contentType: contentType,\n            fileName: fileName,\n            uploadFrom: {\n              sys: {\n                type: 'Link',\n                linkType: 'Upload',\n                id: upload.sys.id\n              }\n            }\n          });\n        });\n      })).then(function (uploads) {\n        // @ts-expect-error\n        data.fields.file = uploads.reduce(function (fieldsData, upload) {\n          return _objectSpread(_objectSpread({}, fieldsData), upload);\n        }, {});\n        return createAsset(data);\n      })[\"catch\"](errorHandler);\n    },\n\n    /**\n     * Gets an Upload\n     * @deprecated since version 5.0\n     * @param id - Upload ID\n     * @return Promise for an Upload\n     * @example ```javascript\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * const uploadStream = createReadStream('path/to/filename_english.jpg')\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUpload('<upload-id>')\n     * .then((upload) => console.log(upload))\n     * .catch(console.error)\n     * ```\n     */\n    getUpload: function getUpload(id) {\n      raiseDeprecationWarning('getUpload');\n      return httpUpload.get('uploads/' + id).then(function (response) {\n        return wrapUpload(http, response.data);\n      })[\"catch\"](errorHandler);\n    },\n\n    /**\n     * Gets a Locale\n     * @deprecated since version 5.0\n     * @param id - Locale ID\n     * @return Promise for an Locale\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getLocale('<locale_id>'))\n     * .then((locale) => console.log(locale))\n     * .catch(console.error)\n     * ```\n     */\n    getLocale: function getLocale(id) {\n      raiseDeprecationWarning('getLocale');\n      return http.get('locales/' + id).then(function (response) {\n        return wrapLocale(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Locales\n     * @deprecated since version 5.0\n     * @return Promise for a collection of Locales\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getLocales())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getLocales: function getLocales() {\n      raiseDeprecationWarning('getLocales');\n      return http.get('locales').then(function (response) {\n        return wrapLocaleCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Locale\n     * @deprecated since version 5.0\n     * @param data - Object representation of the Locale to be created\n     * @return Promise for the newly created Locale\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * // Create locale\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createLocale({\n     *   name: 'German (Austria)',\n     *   code: 'de-AT',\n     *   fallbackCode: 'de-DE',\n     *   optional: true\n     * }))\n     * .then((locale) => console.log(locale))\n     * .catch(console.error)\n     * ```\n     */\n    createLocale: function createLocale(data) {\n      raiseDeprecationWarning('createLocale');\n      return http.post('locales', data).then(function (response) {\n        return wrapLocale(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Webhook\n     * @param id - Webhook ID\n     * @return Promise for a Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhook('<webhook_id>'))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    getWebhook: function getWebhook(id) {\n      return http.get('webhook_definitions/' + id).then(function (response) {\n        return wrapWebhook(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Webhooks\n     * @return Promise for a collection of Webhooks\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getWebhooks())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getWebhooks: function getWebhooks() {\n      return http.get('webhook_definitions').then(function (response) {\n        return wrapWebhookCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Webhook\n     * @param data - Object representation of the Webhook to be created\n     * @return Promise for the newly created Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createWebhook({\n     *   'name': 'My webhook',\n     *   'url': 'https://www.example.com/test',\n     *   'topics': [\n     *     'Entry.create',\n     *     'ContentType.create',\n     *     '*.publish',\n     *     'Asset.*'\n     *   ]\n     * }))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    createWebhook: function createWebhook(data) {\n      return http.post('webhook_definitions', data).then(function (response) {\n        return wrapWebhook(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Webhook with a custom ID\n     * @param id - Webhook ID\n     * @param  data - Object representation of the Webhook to be created\n     * @return Promise for the newly created Webhook\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createWebhookWithId('<webhook_id>', {\n     *   'name': 'My webhook',\n     *   'url': 'https://www.example.com/test',\n     *   'topics': [\n     *     'Entry.create',\n     *     'ContentType.create',\n     *     '*.publish',\n     *     'Asset.*'\n     *   ]\n     * }))\n     * .then((webhook) => console.log(webhook))\n     * .catch(console.error)\n     * ```\n     */\n    createWebhookWithId: function createWebhookWithId(id, data) {\n      return http.put('webhook_definitions/' + id, data).then(function (response) {\n        return wrapWebhook(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Role\n     * @param id - Role ID\n     * @return Promise for a Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRole({\n     *   fields: {\n     *     title: {\n     *       'en-US': 'Role title'\n     *     }\n     *   }\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    getRole: function getRole(id) {\n      return http.get('roles/' + id).then(function (response) {\n        return wrapRole(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Roles\n     * @return Promise for a collection of Roles\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getRoles())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getRoles: function getRoles() {\n      return http.get('roles').then(function (response) {\n        return wrapRoleCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Role\n     * @param data - Object representation of the Role to be created\n     * @return  Promise for the newly created Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRole({\n     *   name: 'My Role',\n     *   description: 'foobar role',\n     *   permissions: {\n     *     ContentDelivery: 'all',\n     *     ContentModel: ['read'],\n     *     Settings: []\n     *   },\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       actions: 'all',\n     *       constraint: {\n     *         and: [\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Entry'\n     *             ]\n     *           },\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Asset'\n     *             ]\n     *           }\n     *         ]\n     *       }\n     *     }\n     *   ]\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    createRole: function createRole(data) {\n      return http.post('roles', data).then(function (response) {\n        return wrapRole(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Role with a custom ID\n     * @param id - Role ID\n     * @param data - Object representation of the Role to be created\n     * @return Promise for the newly created Role\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createRoleWithId('<role-id>', {\n     *   name: 'My Role',\n     *   description: 'foobar role',\n     *   permissions: {\n     *     ContentDelivery: 'all',\n     *     ContentModel: ['read'],\n     *     Settings: []\n     *   },\n     *   policies: [\n     *     {\n     *       effect: 'allow',\n     *       actions: 'all',\n     *       constraint: {\n     *         and: [\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Entry'\n     *             ]\n     *           },\n     *           {\n     *             equals: [\n     *               { doc: 'sys.type' },\n     *               'Asset'\n     *             ]\n     *           }\n     *         ]\n     *       }\n     *     }\n     *   ]\n     * }))\n     * .then((role) => console.log(role))\n     * .catch(console.error)\n     * ```\n     */\n    createRoleWithId: function createRoleWithId(id, data) {\n      return http.put('roles/' + id, data).then(function (response) {\n        return wrapRole(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a User\n     * @param id - User ID\n     * @return Promise for a User\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceUser('id'))\n     * .then((user) => console.log(user))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceUser: function getSpaceUser(id) {\n      return http.get('users/' + id).then(function (response) {\n        return wrapUser(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Users in a space\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise a collection of Users in a space\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceUsers(query))\n     * .then((data) => console.log(data))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceUsers: function getSpaceUsers() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('users/', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapUserCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Space Member\n     * @param id Get Space Member by user_id\n     * @return Promise for a Space Member\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMember(id))\n     * .then((spaceMember) => console.log(spaceMember))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMember: function getSpaceMember(id) {\n      return http.get('space_members/' + id).then(function (response) {\n        return wrapSpaceMember(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Space Members\n     * @param query\n     * @return Promise for a collection of Space Members\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembers({'limit': 100}))\n     * .then((spaceMemberCollection) => console.log(spaceMemberCollection))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMembers: function getSpaceMembers() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('space_members', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSpaceMemberCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Space Membership\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param id - Space Membership ID\n     * @return Promise for a Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMembership('id'))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMembership: function getSpaceMembership(id) {\n      spaceMembershipDeprecationWarning();\n      return http.get('space_memberships/' + id).then(function (response) {\n        return wrapSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Space Memberships\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Space Memberships\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getSpaceMemberships({'limit': 100})) // you can add more queries as 'key': 'value'\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getSpaceMemberships: function getSpaceMemberships() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      spaceMembershipDeprecationWarning();\n      return http.get('space_memberships', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSpaceMembershipCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Space Membership\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param  data - Object representation of the Space Membership to be created\n     * @return Promise for the newly created Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createSpaceMembership({\n     *   admin: false,\n     *   roles: [\n     *     {\n     *       type: 'Link',\n     *       linkType: 'Role',\n     *       id: '<role_id>'\n     *     }\n     *   ],\n     *   email: 'foo@example.com'\n     * }))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    createSpaceMembership: function createSpaceMembership(data) {\n      spaceMembershipDeprecationWarning();\n      return http.post('space_memberships', data).then(function (response) {\n        return wrapSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Space Membership with a custom ID\n     * Warning: the user attribute in the space membership root is deprecated. The attribute has been moved inside the sys  object (i.e. sys.user).\n     * @param id - Space Membership ID\n     * @param data - Object representation of the Space Membership to be created\n     * @return Promise for the newly created Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createSpaceMembershipWithId('<space-membership-id>', {\n     *   admin: false,\n     *   roles: [\n     *     {\n     *       type: 'Link',\n     *       linkType: 'Role',\n     *       id: '<role_id>'\n     *     }\n     *   ],\n     *   email: 'foo@example.com'\n     * }))\n     * .then((spaceMembership) => console.log(spaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    createSpaceMembershipWithId: function createSpaceMembershipWithId(id, data) {\n      spaceMembershipDeprecationWarning();\n      return http.put('space_memberships/' + id, data).then(function (response) {\n        return wrapSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Team Space Membership\n     * @param id - Team Space Membership ID\n     * @return Promise for a Team Space Membership\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeamSpaceMembership('team_space_membership_id'))\n     * .then((teamSpaceMembership) => console.log(teamSpaceMembership))\n     * .catch(console.error)\n     * ```\n     */\n    getTeamSpaceMembership: function getTeamSpaceMembership(teamSpaceMembershipId) {\n      return http.get('team_space_memberships/' + teamSpaceMembershipId).then(function (response) {\n        return wrapTeamSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Team Space Memberships\n     * @param query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n     * @return Promise for a collection of Team Space Memberships\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getTeamSpaceMemberships())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getTeamSpaceMemberships: function getTeamSpaceMemberships() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get('team_space_memberships', createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapTeamSpaceMembershipCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n    * Creates a Team Space Membership\n    * @param id - Team ID\n    * @param data - Object representation of the Team Space Membership to be created\n    * @return Promise for the newly created Team Space Membership\n    * @example ```javascript\n    * const contentful = require('contentful-management')\n    *\n    * const client = contentful.createClient({\n    *   accessToken: '<content_management_api_key>'\n    * })\n    *\n    * client.getSpace('<space_id>')\n    * .then((space) => space.createTeamSpaceMembership('team_id', {\n    *   admin: false,\n    *   roles: [\n    *    {\n          sys: {\n    *       type: 'Link',\n    *       linkType: 'Role',\n    *       id: '<role_id>'\n    *      }\n    *    }\n    *   ],\n    * }))\n    * .then((teamSpaceMembership) => console.log(teamSpaceMembership))\n    * .catch(console.error)\n    * ```\n    */\n    createTeamSpaceMembership: function createTeamSpaceMembership(teamId, data) {\n      return http.post('team_space_memberships', data, {\n        headers: {\n          'x-contentful-team': teamId\n        }\n      }).then(function (response) {\n        return wrapTeamSpaceMembership(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a Api Key\n     * @param id - API Key ID\n     * @return  Promise for a Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKey('<apikey-id>'))\n     * .then((apikey) => console.log(apikey))\n     * .catch(console.error)\n     * ```\n     */\n    getApiKey: function getApiKey(id) {\n      return http.get('api_keys/' + id).then(function (response) {\n        return wrapApiKey(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Api Keys\n     * @return Promise for a collection of Api Keys\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getApiKeys())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getApiKeys: function getApiKeys() {\n      return http.get('api_keys').then(function (response) {\n        return wrapApiKeyCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of preview Api Keys\n     * @return Promise for a collection of Preview Api Keys\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getPreviewApiKeys())\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getPreviewApiKeys: function getPreviewApiKeys() {\n      return http.get('preview_api_keys').then(function (response) {\n        return wrapPreviewApiKeyCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a preview Api Key\n     * @param id - Preview API Key ID\n     * @return  Promise for a Preview Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getPreviewApiKey('<preview-apikey-id>'))\n     * .then((previewApikey) => console.log(previewApikey))\n     * .catch(console.error)\n     * ```\n     */\n    getPreviewApiKey: function getPreviewApiKey(id) {\n      return http.get('preview_api_keys/' + id).then(function (response) {\n        return wrapPreviewApiKey(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Api Key\n     * @param data - Object representation of the Api Key to be created\n     * @return Promise for the newly created Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createApiKey({\n     *   name: 'API Key name',\n     *   environments:[\n     *    {\n     *     sys: {\n     *      type: 'Link'\n     *      linkType: 'Environment',\n     *      id:'<environment_id>'\n     *     }\n     *    }\n     *   ]\n     *   }\n     * }))\n     * .then((apiKey) => console.log(apiKey))\n     * .catch(console.error)\n     * ```\n     */\n    createApiKey: function createApiKey(data) {\n      return http.post('api_keys', data).then(function (response) {\n        return wrapApiKey(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a Api Key with a custom ID\n     * @param id - Api Key ID\n     * @param data - Object representation of the Api Key to be created\n     * @return Promise for the newly created Api Key\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createApiKeyWithId('<api-key-id>', {\n     *   name: 'API Key name'\n     *   environments:[\n     *    {\n     *     sys: {\n     *      type: 'Link'\n     *      linkType: 'Environment',\n     *      id:'<environment_id>'\n     *     }\n     *    }\n     *   ]\n     *   }\n     * }))\n     * .then((apiKey) => console.log(apiKey))\n     * .catch(console.error)\n     * ```\n     */\n    createApiKeyWithId: function createApiKeyWithId(id, data) {\n      return http.put('api_keys/' + id, data).then(function (response) {\n        return wrapApiKey(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an UI Extension\n     * @deprecated since version 5.0\n     * @param id - UI Extension ID\n     * @return Promise for an UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUiExtension('<extension-id>'))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    getUiExtension: function getUiExtension(id) {\n      raiseDeprecationWarning('getUiExtension');\n      return http.get('extensions/' + id).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of UI Extension\n     * @deprecated since version 5.0\n     * @return Promise for a collection of UI Extensions\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getUiExtensions()\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getUiExtensions: function getUiExtensions() {\n      raiseDeprecationWarning('getUiExtensions');\n      return http.get('extensions').then(function (response) {\n        return wrapUiExtensionCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a UI Extension\n     * @deprecated since version 5.0\n     * @param data - Object representation of the UI Extension to be created\n     * @return Promise for the newly created UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createUiExtension({\n     *   extension: {\n     *     name: 'My awesome extension',\n     *     src: 'https://example.com/my',\n     *     fieldTypes: [\n     *       {\n     *         type: 'Symbol'\n     *       },\n     *       {\n     *         type: 'Text'\n     *       }\n     *     ],\n     *     sidebar: false\n     *   }\n     * }))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    createUiExtension: function createUiExtension(data) {\n      raiseDeprecationWarning('createUiExtension');\n      return http.post('extensions', data).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Creates a UI Extension with a custom ID\n     * @deprecated since version 5.0\n     * @param id - UI Extension ID\n     * @param data - Object representation of the UI Extension to be created\n     * @return Promise for the newly created UI Extension\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.createUiExtensionWithId('<extension_id>', {\n     *   extension: {\n     *     name: 'My awesome extension',\n     *     src: 'https://example.com/my',\n     *     fieldTypes: [\n     *       {\n     *         type: 'Symbol'\n     *       },\n     *       {\n     *         type: 'Text'\n     *       }\n     *     ],\n     *     sidebar: false\n     *   }\n     * }))\n     * .then((uiExtension) => console.log(uiExtension))\n     * .catch(console.error)\n     * ```\n     */\n    createUiExtensionWithId: function createUiExtensionWithId(id, data) {\n      raiseDeprecationWarning('createUiExtensionWithId');\n      return http.put('extensions/' + id, data).then(function (response) {\n        return wrapUiExtension(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets all snapshots of an entry\n     * @deprecated since version 5.0\n     * @param entryId - Entry ID\n     * @param query - additional query paramaters\n     * @return Promise for a collection of Entry Snapshots\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEntrySnapshots('<entry_id>'))\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEntrySnapshots: function getEntrySnapshots(entryId) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      raiseDeprecationWarning('getEntrySnapshots');\n      return http.get(\"entries/\".concat(entryId, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets all snapshots of a contentType\n     * @deprecated since version 5.0\n     * @param contentTypeId - Content Type ID\n     * @param query - additional query paramaters\n     * @return Promise for a collection of Content Type Snapshots\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getContentTypeSnapshots('<contentTypeId>'))\n     * .then((snapshots) => console.log(snapshots.items))\n     * .catch(console.error)\n     * ```\n     */\n    getContentTypeSnapshots: function getContentTypeSnapshots(contentTypeId) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      raiseDeprecationWarning('getContentTypeSnapshots');\n      return http.get(\"content_types/\".concat(contentTypeId, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets an Environment Alias\n     * @param Environment Alias ID\n     * @return Promise for an Environment Alias\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironmentAlias('<alias-id>'))\n     * .then((alias) => console.log(alias))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironmentAlias: function getEnvironmentAlias(id) {\n      return http.get('environment_aliases/' + id).then(function (response) {\n        return wrapEnvironmentAlias(http, response.data);\n      }, errorHandler);\n    },\n\n    /**\n     * Gets a collection of Environment Aliases\n     * @return Promise for a collection of Environment Aliases\n     * @example ```javascript\n     * const contentful = require('contentful-management')\n     *\n     * const client = contentful.createClient({\n     *   accessToken: '<content_management_api_key>'\n     * })\n     *\n     * client.getSpace('<space_id>')\n     * .then((space) => space.getEnvironmentAliases()\n     * .then((response) => console.log(response.items))\n     * .catch(console.error)\n     * ```\n     */\n    getEnvironmentAliases: function getEnvironmentAliases() {\n      return http.get('environment_aliases').then(function (response) {\n        return wrapEnvironmentAliasCollection(http, response.data);\n      }, errorHandler);\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}