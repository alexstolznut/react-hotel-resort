{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { wrapCollection } from '../common-utils';\nimport createSpaceApi from '../create-space-api';\n/**\n * This method creates the API for the given space with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a space id, so the base path for requests now has the\n * space id already set.\n * @private\n * @param http - HTTP client instance\n * @param data - API response for a Space\n * @return {Space}\n */\n\nexport function wrapSpace(http, data) {\n  var sdkHttp = http;\n  var space = toPlainObject(cloneDeep(data));\n  var _sdkHttp$httpClientPa = sdkHttp.httpClientParams,\n      hostUpload = _sdkHttp$httpClientPa.hostUpload,\n      defaultHostnameUpload = _sdkHttp$httpClientPa.defaultHostnameUpload;\n  var spaceScopedHttpClient = sdkHttp.cloneWithNewParams({\n    space: space.sys.id\n  });\n  var spaceScopedUploadClient = sdkHttp.cloneWithNewParams({\n    space: space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  });\n  var spaceApi = createSpaceApi({\n    http: spaceScopedHttpClient,\n    httpUpload: spaceScopedUploadClient\n  });\n  var enhancedSpace = enhanceWithMethods(space, spaceApi);\n  return freezeSys(enhancedSpace);\n}\n/**\n * This method wraps each space in a collection with the space API. See wrapSpace\n * above for more details.\n * @private\n */\n\nexport var wrapSpaceCollection = wrapCollection(wrapSpace);","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/node_modules/contentful-management/dist/es-modules/entities/space.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","wrapCollection","createSpaceApi","wrapSpace","http","data","sdkHttp","space","_sdkHttp$httpClientPa","httpClientParams","hostUpload","defaultHostnameUpload","spaceScopedHttpClient","cloneWithNewParams","sys","id","spaceScopedUploadClient","host","spaceApi","httpUpload","enhancedSpace","wrapSpaceCollection"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAOC,cAAP,MAA2B,qBAA3B;AAEA;;;;;;;;;;;AAUA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AACpC,MAAIC,OAAO,GAAGF,IAAd;AACA,MAAIG,KAAK,GAAGR,aAAa,CAACF,SAAS,CAACQ,IAAD,CAAV,CAAzB;AACA,MAAIG,qBAAqB,GAAGF,OAAO,CAACG,gBAApC;AAAA,MACIC,UAAU,GAAGF,qBAAqB,CAACE,UADvC;AAAA,MAEIC,qBAAqB,GAAGH,qBAAqB,CAACG,qBAFlD;AAGA,MAAIC,qBAAqB,GAAGN,OAAO,CAACO,kBAAR,CAA2B;AACrDN,IAAAA,KAAK,EAAEA,KAAK,CAACO,GAAN,CAAUC;AADoC,GAA3B,CAA5B;AAGA,MAAIC,uBAAuB,GAAGV,OAAO,CAACO,kBAAR,CAA2B;AACvDN,IAAAA,KAAK,EAAEA,KAAK,CAACO,GAAN,CAAUC,EADsC;AAEvDE,IAAAA,IAAI,EAAEP,UAAU,IAAIC;AAFmC,GAA3B,CAA9B;AAIA,MAAIO,QAAQ,GAAGhB,cAAc,CAAC;AAC5BE,IAAAA,IAAI,EAAEQ,qBADsB;AAE5BO,IAAAA,UAAU,EAAEH;AAFgB,GAAD,CAA7B;AAIA,MAAII,aAAa,GAAGpB,kBAAkB,CAACO,KAAD,EAAQW,QAAR,CAAtC;AACA,SAAOpB,SAAS,CAACsB,aAAD,CAAhB;AACD;AACD;;;;;;AAMA,OAAO,IAAIC,mBAAmB,GAAGpB,cAAc,CAACE,SAAD,CAAxC","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { wrapCollection } from '../common-utils';\nimport createSpaceApi from '../create-space-api';\n\n/**\n * This method creates the API for the given space with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a space id, so the base path for requests now has the\n * space id already set.\n * @private\n * @param http - HTTP client instance\n * @param data - API response for a Space\n * @return {Space}\n */\nexport function wrapSpace(http, data) {\n  var sdkHttp = http;\n  var space = toPlainObject(cloneDeep(data));\n  var _sdkHttp$httpClientPa = sdkHttp.httpClientParams,\n      hostUpload = _sdkHttp$httpClientPa.hostUpload,\n      defaultHostnameUpload = _sdkHttp$httpClientPa.defaultHostnameUpload;\n  var spaceScopedHttpClient = sdkHttp.cloneWithNewParams({\n    space: space.sys.id\n  });\n  var spaceScopedUploadClient = sdkHttp.cloneWithNewParams({\n    space: space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  });\n  var spaceApi = createSpaceApi({\n    http: spaceScopedHttpClient,\n    httpUpload: spaceScopedUploadClient\n  });\n  var enhancedSpace = enhanceWithMethods(space, spaceApi);\n  return freezeSys(enhancedSpace);\n}\n/**\n * This method wraps each space in a collection with the space API. See wrapSpace\n * above for more details.\n * @private\n */\n\nexport var wrapSpaceCollection = wrapCollection(wrapSpace);"]},"metadata":{},"sourceType":"module"}