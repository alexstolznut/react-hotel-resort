{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject, createRequestConfig } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { wrapCollection } from '../common-utils';\nimport { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker } from '../instance-actions';\nimport { wrapEditorInterface } from './editor-interface';\nimport errorHandler from '../error-handler';\nimport { wrapSnapshot, wrapSnapshotCollection } from './snapshot';\n\nfunction createContentTypeApi(http) {\n  return {\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n    \"delete\": createDeleteEntity({\n      http: http,\n      entityPath: 'content_types'\n    }),\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n    getEditorInterface: function getEditorInterface() {\n      return http.get('content_types/' + this.sys.id + '/editor_interface').then(function (response) {\n        return wrapEditorInterface(http, response.data);\n      }, errorHandler);\n    },\n    getSnapshots: function getSnapshots() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get(\"content_types/\".concat(this.sys.id, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n    getSnapshot: function getSnapshot(snapshotId) {\n      return http.get(\"content_types/\".concat(this.sys.id, \"/snapshots/\").concat(snapshotId)).then(function (response) {\n        return wrapSnapshot(http, response.data);\n      }, errorHandler);\n    },\n    isPublished: createPublishedChecker(),\n    isUpdated: createUpdatedChecker(),\n    isDraft: createDraftChecker(),\n    omitAndDeleteField: function omitAndDeleteField(id) {\n      return findAndUpdateField(this, id, 'omitted', true).then(function (newContentType) {\n        return findAndUpdateField(newContentType, id, 'deleted', true);\n      })[\"catch\"](errorHandler);\n    }\n  };\n}\n/**\n * @private\n * @param id - unique ID of the field\n * @param key - the attribute on the field to change\n * @param value - the value to set the attribute to\n */\n\n\nvar findAndUpdateField = function findAndUpdateField(contentType, id, key, value) {\n  var field = contentType.fields.find(function (field) {\n    return field.id === id;\n  });\n\n  if (!field) {\n    return Promise.reject(new Error(\"Tried to omitAndDeleteField on a nonexistent field, \".concat(id, \", on the content type \").concat(contentType.name, \".\")));\n  } // @ts-expect-error\n\n\n  field[key] = value;\n  return contentType.update();\n};\n/**\n * @private\n * @param http - HTTP client instance\n * @param data - Raw content type data\n * @return Wrapped content type data\n */\n\n\nexport function wrapContentType(http, data) {\n  var contentType = toPlainObject(cloneDeep(data));\n  var contentTypeWithMethods = enhanceWithMethods(contentType, createContentTypeApi(http));\n  return freezeSys(contentTypeWithMethods);\n}\n/**\n * @private\n */\n\nexport var wrapContentTypeCollection = wrapCollection(wrapContentType);","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/node_modules/contentful-management/dist/es-modules/entities/content-type.js"],"names":["cloneDeep","freezeSys","toPlainObject","createRequestConfig","enhanceWithMethods","wrapCollection","createUpdateEntity","createDeleteEntity","createPublishEntity","createUnpublishEntity","createPublishedChecker","createUpdatedChecker","createDraftChecker","wrapEditorInterface","errorHandler","wrapSnapshot","wrapSnapshotCollection","createContentTypeApi","http","update","entityPath","wrapperMethod","wrapContentType","publish","unpublish","getEditorInterface","get","sys","id","then","response","data","getSnapshots","query","arguments","length","undefined","concat","getSnapshot","snapshotId","isPublished","isUpdated","isDraft","omitAndDeleteField","findAndUpdateField","newContentType","contentType","key","value","field","fields","find","Promise","reject","Error","name","contentTypeWithMethods","wrapContentTypeCollection"],"mappings":"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","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject, createRequestConfig } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport { wrapCollection } from '../common-utils';\nimport { createUpdateEntity, createDeleteEntity, createPublishEntity, createUnpublishEntity, createPublishedChecker, createUpdatedChecker, createDraftChecker } from '../instance-actions';\nimport { wrapEditorInterface } from './editor-interface';\nimport errorHandler from '../error-handler';\nimport { wrapSnapshot, wrapSnapshotCollection } from './snapshot';\n\nfunction createContentTypeApi(http) {\n  return {\n    update: createUpdateEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n    \"delete\": createDeleteEntity({\n      http: http,\n      entityPath: 'content_types'\n    }),\n    publish: createPublishEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n    unpublish: createUnpublishEntity({\n      http: http,\n      entityPath: 'content_types',\n      wrapperMethod: wrapContentType\n    }),\n    getEditorInterface: function getEditorInterface() {\n      return http.get('content_types/' + this.sys.id + '/editor_interface').then(function (response) {\n        return wrapEditorInterface(http, response.data);\n      }, errorHandler);\n    },\n    getSnapshots: function getSnapshots() {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return http.get(\"content_types/\".concat(this.sys.id, \"/snapshots\"), createRequestConfig({\n        query: query\n      })).then(function (response) {\n        return wrapSnapshotCollection(http, response.data);\n      }, errorHandler);\n    },\n    getSnapshot: function getSnapshot(snapshotId) {\n      return http.get(\"content_types/\".concat(this.sys.id, \"/snapshots/\").concat(snapshotId)).then(function (response) {\n        return wrapSnapshot(http, response.data);\n      }, errorHandler);\n    },\n    isPublished: createPublishedChecker(),\n    isUpdated: createUpdatedChecker(),\n    isDraft: createDraftChecker(),\n    omitAndDeleteField: function omitAndDeleteField(id) {\n      return findAndUpdateField(this, id, 'omitted', true).then(function (newContentType) {\n        return findAndUpdateField(newContentType, id, 'deleted', true);\n      })[\"catch\"](errorHandler);\n    }\n  };\n}\n/**\n * @private\n * @param id - unique ID of the field\n * @param key - the attribute on the field to change\n * @param value - the value to set the attribute to\n */\n\n\nvar findAndUpdateField = function findAndUpdateField(contentType, id, key, value) {\n  var field = contentType.fields.find(function (field) {\n    return field.id === id;\n  });\n\n  if (!field) {\n    return Promise.reject(new Error(\"Tried to omitAndDeleteField on a nonexistent field, \".concat(id, \", on the content type \").concat(contentType.name, \".\")));\n  } // @ts-expect-error\n\n\n  field[key] = value;\n  return contentType.update();\n};\n/**\n * @private\n * @param http - HTTP client instance\n * @param data - Raw content type data\n * @return Wrapped content type data\n */\n\n\nexport function wrapContentType(http, data) {\n  var contentType = toPlainObject(cloneDeep(data));\n  var contentTypeWithMethods = enhanceWithMethods(contentType, createContentTypeApi(http));\n  return freezeSys(contentTypeWithMethods);\n}\n/**\n * @private\n */\n\nexport var wrapContentTypeCollection = wrapCollection(wrapContentType);"]},"metadata":{},"sourceType":"module"}