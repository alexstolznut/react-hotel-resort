{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\nimport { wrapCollection } from '../common-utils';\nvar entityPath = 'webhook_definitions';\n\nfunction createWebhookApi(http) {\n  return {\n    update: createUpdateEntity({\n      http: http,\n      entityPath: entityPath,\n      wrapperMethod: wrapWebhook\n    }),\n    \"delete\": createDeleteEntity({\n      http: http,\n      entityPath: entityPath\n    }),\n    getCalls: function getCalls() {\n      return http.get('webhooks/' + this.sys.id + '/calls').then(function (response) {\n        return response.data;\n      }, errorHandler);\n    },\n    getCall: function getCall(id) {\n      return http.get('webhooks/' + this.sys.id + '/calls/' + id).then(function (response) {\n        return response.data;\n      }, errorHandler);\n    },\n    getHealth: function getHealth() {\n      return http.get('webhooks/' + this.sys.id + '/health').then(function (response) {\n        return response.data;\n      }, errorHandler);\n    }\n  };\n}\n/**\n * @private\n * @param http - HTTP client instance\n * @param data - Raw webhook data\n * @return Wrapped webhook data\n */\n\n\nexport function wrapWebhook(http, data) {\n  var webhook = toPlainObject(cloneDeep(data));\n  var webhookWithMethods = enhanceWithMethods(webhook, createWebhookApi(http));\n  return freezeSys(webhookWithMethods);\n}\n/**\n * @private\n */\n\nexport var wrapWebhookCollection = wrapCollection(wrapWebhook);","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/node_modules/contentful-management/dist/es-modules/entities/webhook.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","errorHandler","createUpdateEntity","createDeleteEntity","wrapCollection","entityPath","createWebhookApi","http","update","wrapperMethod","wrapWebhook","getCalls","get","sys","id","then","response","data","getCall","getHealth","webhook","webhookWithMethods","wrapWebhookCollection"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,qBAAvD;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,IAAIC,UAAU,GAAG,qBAAjB;;AAEA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAO;AACLC,IAAAA,MAAM,EAAEN,kBAAkB,CAAC;AACzBK,MAAAA,IAAI,EAAEA,IADmB;AAEzBF,MAAAA,UAAU,EAAEA,UAFa;AAGzBI,MAAAA,aAAa,EAAEC;AAHU,KAAD,CADrB;AAML,cAAUP,kBAAkB,CAAC;AAC3BI,MAAAA,IAAI,EAAEA,IADqB;AAE3BF,MAAAA,UAAU,EAAEA;AAFe,KAAD,CANvB;AAULM,IAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,aAAOJ,IAAI,CAACK,GAAL,CAAS,cAAc,KAAKC,GAAL,CAASC,EAAvB,GAA4B,QAArC,EAA+CC,IAA/C,CAAoD,UAAUC,QAAV,EAAoB;AAC7E,eAAOA,QAAQ,CAACC,IAAhB;AACD,OAFM,EAEJhB,YAFI,CAAP;AAGD,KAdI;AAeLiB,IAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBJ,EAAjB,EAAqB;AAC5B,aAAOP,IAAI,CAACK,GAAL,CAAS,cAAc,KAAKC,GAAL,CAASC,EAAvB,GAA4B,SAA5B,GAAwCA,EAAjD,EAAqDC,IAArD,CAA0D,UAAUC,QAAV,EAAoB;AACnF,eAAOA,QAAQ,CAACC,IAAhB;AACD,OAFM,EAEJhB,YAFI,CAAP;AAGD,KAnBI;AAoBLkB,IAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,aAAOZ,IAAI,CAACK,GAAL,CAAS,cAAc,KAAKC,GAAL,CAASC,EAAvB,GAA4B,SAArC,EAAgDC,IAAhD,CAAqD,UAAUC,QAAV,EAAoB;AAC9E,eAAOA,QAAQ,CAACC,IAAhB;AACD,OAFM,EAEJhB,YAFI,CAAP;AAGD;AAxBI,GAAP;AA0BD;AACD;;;;;;;;AAQA,OAAO,SAASS,WAAT,CAAqBH,IAArB,EAA2BU,IAA3B,EAAiC;AACtC,MAAIG,OAAO,GAAGrB,aAAa,CAACF,SAAS,CAACoB,IAAD,CAAV,CAA3B;AACA,MAAII,kBAAkB,GAAGrB,kBAAkB,CAACoB,OAAD,EAAUd,gBAAgB,CAACC,IAAD,CAA1B,CAA3C;AACA,SAAOT,SAAS,CAACuB,kBAAD,CAAhB;AACD;AACD;;;;AAIA,OAAO,IAAIC,qBAAqB,GAAGlB,cAAc,CAACM,WAAD,CAA1C","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport errorHandler from '../error-handler';\nimport { createUpdateEntity, createDeleteEntity } from '../instance-actions';\nimport { wrapCollection } from '../common-utils';\nvar entityPath = 'webhook_definitions';\n\nfunction createWebhookApi(http) {\n  return {\n    update: createUpdateEntity({\n      http: http,\n      entityPath: entityPath,\n      wrapperMethod: wrapWebhook\n    }),\n    \"delete\": createDeleteEntity({\n      http: http,\n      entityPath: entityPath\n    }),\n    getCalls: function getCalls() {\n      return http.get('webhooks/' + this.sys.id + '/calls').then(function (response) {\n        return response.data;\n      }, errorHandler);\n    },\n    getCall: function getCall(id) {\n      return http.get('webhooks/' + this.sys.id + '/calls/' + id).then(function (response) {\n        return response.data;\n      }, errorHandler);\n    },\n    getHealth: function getHealth() {\n      return http.get('webhooks/' + this.sys.id + '/health').then(function (response) {\n        return response.data;\n      }, errorHandler);\n    }\n  };\n}\n/**\n * @private\n * @param http - HTTP client instance\n * @param data - Raw webhook data\n * @return Wrapped webhook data\n */\n\n\nexport function wrapWebhook(http, data) {\n  var webhook = toPlainObject(cloneDeep(data));\n  var webhookWithMethods = enhanceWithMethods(webhook, createWebhookApi(http));\n  return freezeSys(webhookWithMethods);\n}\n/**\n * @private\n */\n\nexport var wrapWebhookCollection = wrapCollection(wrapWebhook);"]},"metadata":{},"sourceType":"module"}