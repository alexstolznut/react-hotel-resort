{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderstolzoff/Desktop/Projects/resort/src/context.js\";\nimport React, { Component } from 'react';\nimport Client from './contentful';\nconst RoomContext = React.createContext(); //\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 400,\n      minPrice: 0,\n      maxPrice: 0,\n      size: 1000,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: 'hotelRooms',\n          order: 'sys.createdAt'\n        });\n        let rooms = this.formatData(response.items);\n        let featuredRooms = rooms.filter(rooms => rooms.featured == true);\n        let maxPrice = Math.max(...rooms.map(item => item.price));\n        let maxSize = Math.max(...rooms.map(item => item.size));\n        this.setState({\n          rooms,\n          featuredRooms,\n          sortedRooms: rooms,\n          loading: false,\n          price: maxPrice,\n          maxPrice: maxPrice,\n          size: maxSize,\n          maxSize: maxSize\n        });\n      } catch (error) {\n        console.log(error);\n      } //     let rooms;\n      //     Client.getEntries({\n      //         content_type: \"hotelRooms\"\n      //     }).then(response => rooms = this.formatData(response.items)).then(reponse=>{\n      //     // let sortedRooms = this.formatData(this.sortedRooms())\n      //     let featuredRooms = rooms.filter(rooms=>rooms.featured==true);\n      //     let maxPrice = Math.max(...rooms.map(item=>item.price));\n      //     let maxSize = Math.max(...rooms.map(item=>item.size));\n      //     this.setState({\n      //         rooms,\n      //         featuredRooms,\n      //         sortedRooms: rooms,\n      //         loading: false,\n      //         price: maxPrice,\n      //         maxPrice: maxPrice,\n      //         size: maxSize,\n      //         maxSize: maxSize\n      //     })\n      //     // console.log(sortedRooms)\n      //     console.log(featuredRooms)\n      // });\n\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const name = event.target.name;\n      const value = target.type === 'checkbox' ? target.checked : event.target.value;\n      console.log(target.checked);\n      this.setState({\n        [name]: value\n      }, this.sortedRooms);\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(images => images.fields.file.url);\n      let rooms = { ...item.fields,\n        images,\n        id\n      };\n      return rooms;\n    });\n    return tempItems;\n  }\n\n  sortedRooms() {\n    let {\n      price,\n      pets,\n      capacity,\n      size,\n      breakfast,\n      type,\n      minSize,\n      maxSize\n    } = this.state;\n    let tempRooms = [...this.state.rooms];\n    capacity = parseInt(capacity);\n    console.log(minSize);\n    price = parseInt(price);\n    minSize = parseInt(minSize);\n    maxSize = parseInt(maxSize);\n\n    if (minSize = \"NaN\") {\n      minSize = 0;\n    } // if(minSize === \"\" || minSize === NaN || minSize === null || minSize < 0) {\n    //     minSize = 0;\n    //     console.log(minSize)\n    // }\n\n\n    if (type != 'all') {\n      tempRooms = tempRooms.filter(items => items.type === type && items.price <= price && items.capacity >= capacity && items.size >= minSize && items.size <= maxSize);\n    } else {\n      tempRooms = tempRooms.filter(items => items.price <= price && items.capacity >= capacity && items.size <= maxSize && items.size >= minSize);\n    }\n\n    if (breakfast) {\n      tempRooms = tempRooms.filter(item => item.breakfast === true);\n    }\n\n    if (pets) {\n      tempRooms = tempRooms.filter(item => item.pets === true);\n    }\n\n    tempRooms.map(items => parseInt(items.capacity));\n    this.setState({\n      sortedRooms: tempRooms\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 16\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 23\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/src/context.js"],"names":["React","Component","Client","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","size","minSize","maxSize","breakfast","pets","getData","response","getEntries","content_type","order","formatData","items","filter","featured","Math","max","map","item","setState","error","console","log","getRoom","slug","tempRooms","room","find","handleChange","event","target","name","value","checked","componentDidMount","tempItems","id","sys","images","fields","file","url","parseInt","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Client from './contentful'\nconst RoomContext = React.createContext();\n\n\n \n//\n\nclass RoomProvider extends Component {\n\n    state = {\n        rooms: [],\n        sortedRooms: [],\n        featuredRooms:[],\n        loading: true,\n        type: 'all',\n        capacity: 1,\n        price: 400, \n        minPrice: 0,\n        maxPrice: 0,\n        size: 1000,\n        minSize: 0,\n        maxSize: 0,\n        breakfast: false,\n        pets: false\n\n    };\n\n    getData = async () =>{\n\n        try {\n            let response = await Client.getEntries({\n                content_type: 'hotelRooms',\n                order: 'sys.createdAt'\n            });\n            let rooms = this.formatData(response.items)\n            let featuredRooms = rooms.filter(rooms=>rooms.featured==true);\n        let maxPrice = Math.max(...rooms.map(item=>item.price));\n        let maxSize = Math.max(...rooms.map(item=>item.size));\n        this.setState({\n            rooms,\n            featuredRooms,\n            sortedRooms: rooms,\n            loading: false,\n            price: maxPrice,\n            maxPrice: maxPrice,\n            size: maxSize,\n            maxSize: maxSize\n        })\n\n        } catch (error) {\n            console.log(error)\n        }\n    //     let rooms;\n    //     Client.getEntries({\n    //         content_type: \"hotelRooms\"\n    //     }).then(response => rooms = this.formatData(response.items)).then(reponse=>{\n    //     // let sortedRooms = this.formatData(this.sortedRooms())\n    //     let featuredRooms = rooms.filter(rooms=>rooms.featured==true);\n    //     let maxPrice = Math.max(...rooms.map(item=>item.price));\n    //     let maxSize = Math.max(...rooms.map(item=>item.size));\n    //     this.setState({\n    //         rooms,\n    //         featuredRooms,\n    //         sortedRooms: rooms,\n    //         loading: false,\n    //         price: maxPrice,\n    //         maxPrice: maxPrice,\n    //         size: maxSize,\n    //         maxSize: maxSize\n    //     })\n    //     // console.log(sortedRooms)\n    //     console.log(featuredRooms)\n    // });\n    }\n\n\n    componentDidMount(){\n       this.getData();\n    }\n\n\n    formatData(items) {\n        let tempItems = items.map(item=>{\n            let id = item.sys.id;\n            let images = item.fields.images.map(images=>images.fields.file.url);\n            let rooms = {...item.fields, images, id};\n            return rooms;\n        });\n        return tempItems;\n\n    }\n\n    sortedRooms() {\n        let {price, pets, capacity, size, breakfast, type, minSize, maxSize} = this.state;\n        let tempRooms = [...this.state.rooms]\n        capacity = parseInt(capacity);\n        console.log(minSize);\n        price = parseInt(price);\n        minSize = parseInt(minSize);\n        maxSize = parseInt(maxSize);\n\n        if(minSize = \"NaN\"){\n            minSize = 0\n        }\n       \n        // if(minSize === \"\" || minSize === NaN || minSize === null || minSize < 0) {\n        //     minSize = 0;\n        //     console.log(minSize)\n        // }\n        if( type != 'all') {\n            tempRooms = tempRooms.filter(items => items.type === type && items.price <= price && items.capacity >= capacity && items.size >= minSize && items.size <= maxSize);\n        } else {\n            tempRooms = tempRooms.filter(items =>  items.price <= price &&  items.capacity >= capacity && items.size <= maxSize && items.size >= minSize);\n        }\n        if (breakfast){\n            tempRooms = tempRooms.filter(item => item.breakfast === true)\n        }\n\n        if (pets){\n            tempRooms = tempRooms.filter(item => item.pets === true)\n        }\n        tempRooms.map(items=> parseInt(items.capacity))\n        this.setState({\n            sortedRooms: tempRooms\n        })\n        \n        \n    }\n\n    \n\n    getRoom = slug => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug===slug);\n        return room;\n    }\n\n    handleChange = event => {\n        const target = event.target;\n        const name = event.target.name;\n        const value =  target.type === 'checkbox' ? target.checked : event.target.value;\n        console.log(target.checked);\n        this.setState({\n            [name]: value \n        }, this.sortedRooms);\n    }\n    \n    render() {\n        return (\n            <RoomContext.Provider value={{...this.state, getRoom:this.getRoom, handleChange: this.handleChange}}>\n                {this.props.children}\n            </RoomContext.Provider>\n        )\n    }\n}\n\n\n\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component) {\n    return function ConsumerWrapper(props) {\n        return <RoomConsumer>\n            {value => <Component {...props} context={value}/>}\n        </RoomConsumer>\n    }\n}\n\nexport {RoomProvider, RoomConsumer, RoomContext}"]},"metadata":{},"sourceType":"module"}