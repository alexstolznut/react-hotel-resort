{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport createEnvironmentApi from '../create-environment-api';\nimport { wrapCollection } from '../common-utils';\n/**\n * This method creates the API for the given environment with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a environment id, so the base path for requests now has the\n * environment id already set.\n * @private\n * @param http - HTTP client instance\n * @param data - API response for a Environment\n * @return\n */\n\nexport function wrapEnvironment(http, data) {\n  // do not pollute generated typings\n  var sdkHttp = http;\n  var environment = toPlainObject(cloneDeep(data));\n  var _sdkHttp$httpClientPa = sdkHttp.httpClientParams,\n      hostUpload = _sdkHttp$httpClientPa.hostUpload,\n      defaultHostnameUpload = _sdkHttp$httpClientPa.defaultHostnameUpload;\n  var environmentScopedHttpClient = sdkHttp.cloneWithNewParams({\n    baseURL: http.defaults.baseURL + 'environments/' + environment.sys.id\n  });\n  var environmentScopedUploadClient = sdkHttp.cloneWithNewParams({\n    space: environment.sys.space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  });\n  var environmentApi = createEnvironmentApi({\n    http: environmentScopedHttpClient,\n    httpUpload: environmentScopedUploadClient\n  });\n  var enhancedEnvironment = enhanceWithMethods(environment, environmentApi);\n  return freezeSys(enhancedEnvironment);\n}\n/**\n * This method wraps each environment in a collection with the environment API. See wrapEnvironment\n * above for more details.\n * @private\n */\n\nexport var wrapEnvironmentCollection = wrapCollection(wrapEnvironment);","map":{"version":3,"sources":["/Users/alexanderstolzoff/Desktop/Projects/resort/node_modules/contentful-management/dist/es-modules/entities/environment.js"],"names":["cloneDeep","freezeSys","toPlainObject","enhanceWithMethods","createEnvironmentApi","wrapCollection","wrapEnvironment","http","data","sdkHttp","environment","_sdkHttp$httpClientPa","httpClientParams","hostUpload","defaultHostnameUpload","environmentScopedHttpClient","cloneWithNewParams","baseURL","defaults","sys","id","environmentScopedUploadClient","space","host","environmentApi","httpUpload","enhancedEnvironment","wrapEnvironmentCollection"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,qBAAzC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA;;;;;;;;;;;AAUA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,IAA/B,EAAqC;AAC1C;AACA,MAAIC,OAAO,GAAGF,IAAd;AACA,MAAIG,WAAW,GAAGR,aAAa,CAACF,SAAS,CAACQ,IAAD,CAAV,CAA/B;AACA,MAAIG,qBAAqB,GAAGF,OAAO,CAACG,gBAApC;AAAA,MACIC,UAAU,GAAGF,qBAAqB,CAACE,UADvC;AAAA,MAEIC,qBAAqB,GAAGH,qBAAqB,CAACG,qBAFlD;AAGA,MAAIC,2BAA2B,GAAGN,OAAO,CAACO,kBAAR,CAA2B;AAC3DC,IAAAA,OAAO,EAAEV,IAAI,CAACW,QAAL,CAAcD,OAAd,GAAwB,eAAxB,GAA0CP,WAAW,CAACS,GAAZ,CAAgBC;AADR,GAA3B,CAAlC;AAGA,MAAIC,6BAA6B,GAAGZ,OAAO,CAACO,kBAAR,CAA2B;AAC7DM,IAAAA,KAAK,EAAEZ,WAAW,CAACS,GAAZ,CAAgBG,KAAhB,CAAsBH,GAAtB,CAA0BC,EAD4B;AAE7DG,IAAAA,IAAI,EAAEV,UAAU,IAAIC;AAFyC,GAA3B,CAApC;AAIA,MAAIU,cAAc,GAAGpB,oBAAoB,CAAC;AACxCG,IAAAA,IAAI,EAAEQ,2BADkC;AAExCU,IAAAA,UAAU,EAAEJ;AAF4B,GAAD,CAAzC;AAIA,MAAIK,mBAAmB,GAAGvB,kBAAkB,CAACO,WAAD,EAAcc,cAAd,CAA5C;AACA,SAAOvB,SAAS,CAACyB,mBAAD,CAAhB;AACD;AACD;;;;;;AAMA,OAAO,IAAIC,yBAAyB,GAAGtB,cAAc,CAACC,eAAD,CAA9C","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { freezeSys, toPlainObject } from 'contentful-sdk-core';\nimport enhanceWithMethods from '../enhance-with-methods';\nimport createEnvironmentApi from '../create-environment-api';\nimport { wrapCollection } from '../common-utils';\n\n/**\n * This method creates the API for the given environment with all the methods for\n * reading and creating other entities. It also passes down a clone of the\n * http client with a environment id, so the base path for requests now has the\n * environment id already set.\n * @private\n * @param http - HTTP client instance\n * @param data - API response for a Environment\n * @return\n */\nexport function wrapEnvironment(http, data) {\n  // do not pollute generated typings\n  var sdkHttp = http;\n  var environment = toPlainObject(cloneDeep(data));\n  var _sdkHttp$httpClientPa = sdkHttp.httpClientParams,\n      hostUpload = _sdkHttp$httpClientPa.hostUpload,\n      defaultHostnameUpload = _sdkHttp$httpClientPa.defaultHostnameUpload;\n  var environmentScopedHttpClient = sdkHttp.cloneWithNewParams({\n    baseURL: http.defaults.baseURL + 'environments/' + environment.sys.id\n  });\n  var environmentScopedUploadClient = sdkHttp.cloneWithNewParams({\n    space: environment.sys.space.sys.id,\n    host: hostUpload || defaultHostnameUpload\n  });\n  var environmentApi = createEnvironmentApi({\n    http: environmentScopedHttpClient,\n    httpUpload: environmentScopedUploadClient\n  });\n  var enhancedEnvironment = enhanceWithMethods(environment, environmentApi);\n  return freezeSys(enhancedEnvironment);\n}\n/**\n * This method wraps each environment in a collection with the environment API. See wrapEnvironment\n * above for more details.\n * @private\n */\n\nexport var wrapEnvironmentCollection = wrapCollection(wrapEnvironment);"]},"metadata":{},"sourceType":"module"}